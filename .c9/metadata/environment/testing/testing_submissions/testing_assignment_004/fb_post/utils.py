{"filter":false,"title":"utils.py","tooltip":"/testing/testing_submissions/testing_assignment_004/fb_post/utils.py","undoManager":{"mark":73,"position":73,"stack":[[{"start":{"row":0,"column":0},"end":{"row":688,"column":35},"action":"remove","lines":["from . models import *","from . exceptions import *","from datetime import datetime","'''","# Task-2","def create_post(user_id, post_content):","    user = User.objects.filter(id=user_id).exists()","    if not user:","        raise InvalidUserException","    if post_content == \"\":","        raise InvalidPostContent","    else:","        post=Post.objects.create(","            content=post_content,","            posted_by_id=user_id","            )","        return post.id","  ","# Task-3          ","def create_comment(user_id, post_id, comment_content):","    user = User.objects.filter(id=user_id).exists()","    post = Post.objects.filter(id=post_id).exists()","    if not user:","        raise InvalidUserException","    if not post:","        raise InvalidPostException","    if comment_content == \"\":","        raise InvalidCommentContent","    else:","        comment=Comment.objects.create(","            content=comment_content,","            commented_by_id=user_id,","            post_id=post_id","            )","        return comment.id","        ","# Task-4","def reply_to_comment(user_id, comment_id, reply_content):","    user = User.objects.filter(id=user_id)","    comments = Comment.objects.filter(id=comment_id)","    len(comments)","    if user.exists() == False:","        raise InvalidUserException","    if comments.exists() == False:","        raise InvalidCommentException","    if reply_content == \"\":","        raise InvalidReplyContent","    else:","        if(comments[0].parent_comment_id):","            comment=Comment.objects.create(","                content=reply_content,","                commented_by_id=user_id,","                post_id=comments[0].post_id,","                parent_comment_id=comments[0].parent_comment_id","                )","        else:","            comment=Comment.objects.create(","                content=reply_content,","                commented_by_id=user_id,","                post_id=comments[0].post_id,","                parent_comment_id=comment_id","                )","        return comment.id","        ","# Task-5","def react_to_post(user_id, post_id, reaction_type):","    user = User.objects.filter(id=user_id)","    post = Post.objects.filter(id=post_id)","    if user.exists() == False:","        raise InvalidUserException","    if post.exists() == False:","        raise InvalidPostException","    if reaction_type not in ['WOW', 'LIT', 'LOVE', 'HAHA', 'THUMBS-UP',","                            'THUMBS-DOWN', 'ANGRY', 'SAD']:","        raise InvalidReactionTypeException","    else:","        try:","            react=Reaction.objects.get(","                reacted_by_id=user_id,","                post_id=post_id","                )","        except:","            Reaction.objects.create(","                reacted_by_id=user_id,","                post_id=post_id,","                reaction=reaction_type","                )","            return","            ","        if react.reaction == reaction_type:","            react.delete()","        else:","            react.reaction = reaction_type","            react.reacted_at = datetime.now()","            react.save()","            ","# Task-6","def react_to_comment(user_id, comment_id, reaction_type):","    user = User.objects.filter(id=user_id)","    comment = Comment.objects.filter(id=comment_id)","    if user.exists() == False:","        raise InvalidUserException","    if comment.exists() == False:","        raise InvalidCommentException","    if reaction_type not in ['WOW', 'LIT', 'LOVE', 'HAHA', 'THUMBS-UP',","                            'THUMBS-DOWN', 'ANGRY', 'SAD']:","        raise InvalidReactionTypeException","    else:","        try:","            react=Reaction.objects.get(","                reacted_by_id=user_id,","                comment_id=comment_id","                )","        except:","            Reaction.objects.create(","                reacted_by_id=user_id,","                comment_id=comment_id,","                reaction=reaction_type","                )","            return","            ","        if react.reaction == reaction_type:","            react.delete()","        else:","            react.reaction = reaction_type","            react.reacted_at = datetime.now()","            react.save()","    ","# Task-7","def get_total_reaction_count():","    return Reaction.objects.aggregate(","        count=Count('id')","        )","        ","# Task-8","def get_reaction_metrics(post_id):","    post = Post.objects.filter(id=post_id)","    if post.exists() == False:","        raise InvalidPostException","    else:","        matrices = Reaction.objects.values('reaction').filter(post_id=post_id).annotate(","            count=Count('reaction')","            )","        reaction_matrices={}","        for matric in  matrices:","            reaction_matrices[matric['reaction']] = matric['count']","    return reaction_matrices","    ","# Task-9","def delete_post(user_id, post_id):","    post=Post.objects.filter(id=post_id,posted_by_id=user_id)","    if len(post) > 0:","        post.delete()","    else:","        #user = User.objects.filter(id=user_id).exists()","        #post = Post.objects.filter(id=post_id).exists()","        if not User.objects.filter(id=user_id).exists():","            raise InvalidUserException","        if not Post.objects.filter(id=post_id).exists():","            raise InvalidPostException","        raise UserCannotDeletePostException","        ","# Task-10","def get_posts_with_more_positive_reactions():","    positive_reactions=[","        'THUMBS-UP', 'LIT', 'LOVE', 'HAHA', 'WOW'","        ]","    negative_reactions=[","        'SAD', 'ANGRY', 'THUMBS-DOWN'","        ]","    positive_count=Count('reactions',filter=Q(","        reactions__reaction__in=positive_reactions))","    negative_count=Count('reactions',filter=Q(","        reactions__reaction__in=negative_reactions))","    post=Post.objects.annotate(pcount=positive_count","        ).annotate(ncount=negative_count).filter(","        pcount__gt=F('ncount')","        ).values_list('id', flat=True)","    return list(post)","    ","# Task-11","def get_posts_reacted_by_user(user_id):","    user = User.objects.filter(id=user_id)","    if user.exists() == False:","        raise InvalidUserException","    else:","        post=Post.objects.filter(","            reactions__reacted_by_id=user_id","            ).values_list('id', flat=True)","        return list(post)","        ","# Task-12","def get_reactions_to_post(post_id):","    post = Post.objects.filter(id=post_id)","    if post.exists() == False:","        raise InvalidPostException","    else:","        reactions=Reaction.objects.filter(","            post_id=post_id","            ).select_related('reacted_by')","        user_list=[]","        for react in reactions:","            user_dict={","                'user_id': react.reacted_by_id,","                'name': react.reacted_by.name,","                'profile_pic': react.reacted_by.profile_pic,","                'reaction': react.reaction","            }","            user_list.append(user_dict)","        return user_list","        ","# Task-13","def get_post(post_id,post_value=False):","    ","    if post_value == False:","        post = Post.objects.filter(id=post_id)","        ","        if post.exists() == False:","            raise InvalidPostException","            ","        posts = Post.objects.filter(","                id=post_id).select_related(","                    'posted_by'","                    ).prefetch_related('reactions',","                    Prefetch('comments',","                    queryset=Comment.objects.select_related(","                        'commented_by').prefetch_related('reactions')))","        ","    else:","        posts = Post.objects.filter(","            posted_by_id=post_id).select_related(","                'posted_by'","                ).prefetch_related('reactions',","                Prefetch('comments',","                queryset=Comment.objects.select_related(","                    'commented_by').prefetch_related('reactions')))","        \"\"\" ","            Post.objects.filter(","            posted_by_id=post_id).select_related(","                'posted_by'","                ).prefetch_related('reactions',","                'comments__commented_by',","                'comments__reactions')","                ","        \"\"\"","    ","    post_list=[]","    ","    for post in posts:","        comment_list=[]","            ","        post_comments = list(post.comments.all())","        for comment in post_comments:","                ","            if comment.parent_comment_id == None:","                    ","                replies_list=[]","                comments_list=[]","                for comments in post_comments:","                    if comment.id == comments.parent_comment_id:","                        comments_list.append(comments)","                    ","                for comment_reply in comments_list:","                        ","                    reply_react_list=[]","                    for react in list(comment_reply.reactions.all()):","                        if react.reaction not in reply_react_list:","                            reply_react_list.append(react.reaction)","                        ","                    replies_dict={","                            'comment_id': comment_reply.id,","                            'commenter': {","                                'user_id': comment_reply.commented_by_id,","                                'name': comment_reply.commented_by.name,","                                'profile_pic': comment_reply.commented_by.profile_pic","                            },","                            'commented_at': str(datetime.strftime(comment_reply.commented_at,'%Y-%m-%d %H:%M:%S.%f')),","                            'comment_content': comment_reply.content,","                            'reactions': {","                            'count': len(reply_react_list),","                            'type': reply_react_list","                            },","                    }","                    replies_list.append(replies_dict)","                        ","                comment_react_list=[]","                for react in list(comment.reactions.all()):","                    if react.reaction not in comment_react_list:","                        comment_react_list.append(react.reaction)","                        ","                comment_dict={","                        'comment_id': comment.id,","                        'commenter': {","                          'user_id': comment.commented_by_id,","                          'name': comment.commented_by.name,","                          'profile_pic': comment.commented_by.profile_pic","                        },","                        'commented_at': str(datetime.strftime(comment.commented_at,'%Y-%m-%d %H:%M:%S.%f')),","                        'comment_content': comment.content,","                        'reactions': {","                          'count': len(comment_react_list),","                          'type': comment_react_list","                        },","                        'replies_count': len(replies_list),","                        'replies': replies_list,","                }","                comment_list.append(comment_dict)","        post_react_list=[]","        for react in list(post.reactions.all()):","            if react.reaction not in post_react_list:","                post_react_list.append(react.reaction)","            ","        post_dict={","                'post_id': post.id,","                'posted_by': {","                    'name': post.posted_by.name,","                    'user_id': post.posted_by_id,","                    'profile_pic': post.posted_by.profile_pic","                },","                'posted_at': str(datetime.strftime(post.posted_at,'%Y-%m-%d %H:%M:%S.%f')),","                'post_content': post.content,","                'reactions': {","                  'count': post.reactions.count(),","                  'type': post_react_list,","                },","                'comments': comment_list,","                'comments_count': len(comment_list),","        }","        post_list.append(post_dict)","    if post_value == True:","        return post_list","    else:","        return post_list[0]","        ","# Task-14","def get_user_posts(user_id):","    user = User.objects.filter(id=user_id)","    if user.exists() == False:","        raise InvalidUserException","    else:","        user_posts=get_post(user_id,post_value=True)","        return user_posts","","# Task-15","def get_replies_for_comment(comment_id):","    comment = Comment.objects.filter(id=comment_id)","    if comment.exists() == False:","        raise InvalidCommentException","    else:","        comments=Comment.objects.select_related(","            'commented_by').filter(","            parent_comment_id=comment_id","            )","            ","        comment_list=[]","        for comment in comments:","            comment_dict={","                'comment_id': comment.id,","                'commenter': {","                  'user_id': comment.commented_by_id,","                  'name': comment.commented_by.name,","                  'profile_pic': comment.commented_by.profile_pic","                },","                'commented_at': str(datetime.strftime(comment.commented_at,'%Y-%m-%d %H:%M:%S.%f')),","                'comment_content': comment.content,","            }","            comment_list.append(comment_dict)","        return comment_list","'''","        ","# Assignment-7","# Task-1","","# completed","","# Task-2","def create_group(user_id, name, member_ids):","    user_ids  = list(User.objects.values_list('id',flat=True))","    if user_id not in user_ids:","        raise InvalidUserException","    if name == \"\":","        raise InvalidGroupNameException","    else:","        member_ids = list(set(member_ids))","        ","        for id in member_ids:","            if id not in user_ids:","                raise InvalidMemberException","                ","        if user_id in member_ids:","            member_ids.remove(user_id)","        ","        group = Group.objects.create(name=name)","        group.members.add(user_id, through_defaults={'is_admin':True})","                ","        group.members.add(*member_ids)","        ","        return group.id","        ","","# Task-3","def add_member_to_group(user_id, new_member_id, group_id):","    user_ids  = list(User.objects.values_list('id',flat=True))","    ","    if user_id not in user_ids:","        raise InvalidUserException","        ","    if new_member_id not in user_ids:","        raise InvalidMemberException","        ","    groups = Group.objects.filter(","        id=group_id).prefetch_related('membership_set')","        ","    ","    if groups.exists() == False:","        raise InvalidGroupException","    else:","        for group in groups:        ","            group_member_ids =[]","            for member in group.members.all():","                group_member_ids.append(member.id)","                ","            if user_id not in group_member_ids:","                raise UserNotInGroupException","            ","            group_admins=[]","            for admin in group.membership_set.filter(is_admin=True):","                group_admins.append(admin.member_id)","                ","            if user_id not in group_admins:","                raise UserIsNotAdminException","                ","            if new_member_id not in group_member_ids:","                group.members.add(new_member_id)","            ","    ","# Task-4","def remove_member_from_group(user_id, member_id, group_id):","    user_ids  = list(User.objects.values_list('id',flat=True))","    ","    if user_id not in user_ids:","        raise InvalidUserException","        ","    if member_id not in user_ids:","        raise InvalidMemberException","        ","    groups = Group.objects.filter(","        id=group_id).prefetch_related('membership_set')","        ","    if groups.exists() == False:","        raise InvalidGroupException","    else:","        for group in groups:        ","            ","            group_member_ids =[]","            for member in group.members.all():","                group_member_ids.append(member.id)","                ","            if user_id not in group_member_ids:","                raise UserNotInGroupException","            if member_id not in group_member_ids:","                raise MemberNotInGroupException","            ","            ","            if not group.membership_set.get(member_id=user_id).is_admin:","                raise UserIsNotAdminException","            else:","                group.members.remove(member_id)","                #group.membership_set.remove(Membership.objects.get(member_id=member_id))","        ","","# Task-5","def make_member_as_admin(user_id, member_id, group_id):","    user_ids  = list(User.objects.values_list('id',flat=True))","    ","    if user_id not in user_ids:","        raise InvalidUserException","        ","    if member_id not in user_ids:","        raise InvalidMemberException","        ","    groups = Group.objects.filter(","        id=group_id).prefetch_related('membership_set')","        ","    if groups.exists() == False:","        raise InvalidGroupException","    else:","        for group in groups:        ","            ","            group_member_ids =[]","            for member in group.members.all():","                group_member_ids.append(member.id)","                ","            if user_id not in group_member_ids:","                raise UserNotInGroupException","                ","            if member_id not in group_member_ids:","                raise MemberNotInGroupException","            ","            if not group.membership_set.get(member_id=user_id).is_admin:","                raise UserIsNotAdminException","            else:","                if  not group.membership_set.get(member_id=member_id).is_admin:","                    Membership.objects.filter(","                        group_id = group_id, member_id = member_id).update(","                        is_admin=True","                    )","                    ","# Task-6","def create_post(user_id, post_content, group_id=None):","    user = User.objects.filter(id=user_id).exists()","    if not user:","        raise InvalidUserException","    if post_content == \"\":","        raise InvalidPostContent","    ","    if group_id:","        group = Group.objects.filter(id=group_id)","        if group.exists() == False:","            raise InvalidGroupException","        else:    ","            group_member_ids =[]","            for member in group[0].members.all():","                group_member_ids.append(member.id)","                    ","            if user_id not in group_member_ids:","                raise UserNotInGroupException","            ","    post=Post.objects.create(","            content=post_content,","            posted_by_id=user_id,","            group_id = group_id","            )","    return post.id","        ","            ","# Task-7","def get_group_feed(user_id, group_id, offset, limit):","    user = User.objects.filter(id=user_id)","    if user.exists() == False:","        raise InvalidUserException","    ","    group = Group.objects.filter(id=group_id)","    if group.exists() == False:","        raise InvalidGroupException","    ","    group_ids=[]","    for member in group[0].members.all():","        group_ids.append(member.id)","    ","    if user_id not in group_ids:","        raise UserNotInGroupException","        ","    if offset < 0:","        raise InvalidOffSetValueException","    if limit <= 0:","        raise InvalidLimitSetValueException","    ","    posts = list(Post.objects.filter(","            posted_by_id=user_id, group_id=group_id).select_related(","                'posted_by'","                ).prefetch_related('reactions',","                Prefetch('comments',","                queryset=Comment.objects.select_related(","                    'commented_by').prefetch_related('reactions'))))[offset:limit+offset]","                    ","    post_list=[]","    ","    for post in posts:","        comment_list=[]","            ","        post_comments = list(post.comments.all())","        for comment in post_comments:","                ","            if comment.parent_comment_id == None:","                    ","                replies_list=[]","                comments_list=[]","                for comments in post_comments:","                    if comment.id == comments.parent_comment_id:","                        comments_list.append(comments)","                    ","                for comment_reply in comments_list:","                        ","                    reply_react_list=[]","                    for react in list(comment_reply.reactions.all()):","                        if react.reaction not in reply_react_list:","                            reply_react_list.append(react.reaction)","                        ","                    replies_dict={","                            'comment_id': comment_reply.id,","                            'commenter': {","                                'user_id': comment_reply.commented_by_id,","                                'name': comment_reply.commented_by.name,","                                'profile_pic': comment_reply.commented_by.profile_pic","                            },","                            'commented_at': str(datetime.strftime(comment_reply.commented_at,'%Y-%m-%d %H:%M:%S.%f')),","                            'comment_content': comment_reply.content,","                            'reactions': {","                            'count': len(reply_react_list),","                            'type': reply_react_list","                            },","                    }","                    replies_list.append(replies_dict)","                        ","                comment_react_list=[]","                for react in list(comment.reactions.all()):","                    if react.reaction not in comment_react_list:","                        comment_react_list.append(react.reaction)","                        ","                comment_dict={","                        'comment_id': comment.id,","                        'commenter': {","                          'user_id': comment.commented_by_id,","                          'name': comment.commented_by.name,","                          'profile_pic': comment.commented_by.profile_pic","                        },","                        'commented_at': str(datetime.strftime(comment.commented_at,'%Y-%m-%d %H:%M:%S.%f')),","                        'comment_content': comment.content,","                        'reactions': {","                          'count': len(comment_react_list),","                          'type': comment_react_list","                        },","                        'replies_count': len(replies_list),","                        'replies': replies_list,","                }","                comment_list.append(comment_dict)","        post_react_list=[]","        for react in list(post.reactions.all()):","            if react.reaction not in post_react_list:","                post_react_list.append(react.reaction)","            ","        post_dict={","                'post_id': post.id,","                'posted_by': {","                    'name': post.posted_by.name,","                    'user_id': post.posted_by_id,","                    'profile_pic': post.posted_by.profile_pic","                },","                'posted_at': str(datetime.strftime(post.posted_at,'%Y-%m-%d %H:%M:%S.%f')),","                'post_content': post.content,","                'reactions': {","                  'count': post.reactions.count(),","                  'type': post_react_list,","                },","                'comments': comment_list,","                'comments_count': len(comment_list),","        }","        post_list.append(post_dict)","    ","    return post_list","","# Task-8","def get_posts_with_more_comments_than_reactions():","","    post=Post.objects.annotate(","        comment_count=Count('comments')).annotate(","            reaction_count=Count('reactions')).filter(","                comment_count__gt=F('reaction_count')","                ).values_list('id',flat=True)","                ","    return list(post)","    ","# Task-9","def get_user_posts(user_id):","    pass","","# Task-10","def get_silent_group_members(group_id):","    group = Group.objects.filter(id=group_id)","    if group.exists() == False:","        raise InvalidGroupException","    else:","        group_member_ids =[]","        for member in group[0].members.all():","            group_member_ids.append(member.id)","        ","        active_users=[]","        for member in Post.objects.filter(group_id=group_id):","            active_users.append(member.posted_by_id)","            ","        active_user_ids=list(set(active_users))","        ","        silent_group_members=[]","        for member in group_member_ids:","            if member not in active_user_ids:","                silent_group_members.append(member)","                ","        return silent_group_members"],"id":2},{"start":{"row":0,"column":0},"end":{"row":366,"column":27},"action":"insert","lines":["from . models import *","from . exceptions import *","from datetime import datetime","","# Task-2","def create_post(user_id, post_content):","    user = User.objects.filter(id=user_id).exists()","    if not user:","        raise InvalidUserException","    if post_content == \"\":","        raise InvalidPostContent","    else:","        post=Post.objects.create(","            content=post_content,","            posted_by_id=user_id","            )","        return post.id","  ","# Task-3          ","def create_comment(user_id, post_id, comment_content):","    user = User.objects.filter(id=user_id).exists()","    post = Post.objects.filter(id=post_id).exists()","    if not user:","        raise InvalidUserException","    if not post:","        raise InvalidPostException","    if comment_content == \"\":","        raise InvalidCommentContent","    else:","        comment=Comment.objects.create(","            content=comment_content,","            commented_by_id=user_id,","            post_id=post_id","            )","        return comment.id","        ","# Task-4","def reply_to_comment(user_id, comment_id, reply_content):","    user = User.objects.filter(id=user_id)","    comments = Comment.objects.filter(id=comment_id)","    len(comments)","    if user.exists() == False:","        raise InvalidUserException","    if comments.exists() == False:","        raise InvalidCommentException","    if reply_content == \"\":","        raise InvalidReplyContent","    else:","        if(comments[0].parent_comment_id):","            comment=Comment.objects.create(","                content=reply_content,","                commented_by_id=user_id,","                post_id=comments[0].post_id,","                parent_comment_id=comments[0].parent_comment_id","                )","        else:","            comment=Comment.objects.create(","                content=reply_content,","                commented_by_id=user_id,","                post_id=comments[0].post_id,","                parent_comment_id=comment_id","                )","        return comment.id","        ","# Task-5","def react_to_post(user_id, post_id, reaction_type):","    user = User.objects.filter(id=user_id)","    post = Post.objects.filter(id=post_id)","    if user.exists() == False:","        raise InvalidUserException","    if post.exists() == False:","        raise InvalidPostException","    if reaction_type not in ['WOW', 'LIT', 'LOVE', 'HAHA', 'THUMBS-UP',","                            'THUMBS-DOWN', 'ANGRY', 'SAD']:","        raise InvalidReactionTypeException","    else:","        try:","            react=Reaction.objects.get(","                reacted_by_id=user_id,","                post_id=post_id","            )","        except:","            Reaction.objects.create(","                reacted_by_id=user_id,","                post_id=post_id,","                reaction=reaction_type","            )","            return","            ","        if react.reaction == reaction_type:","            react.delete()","        else:","            react.reaction = reaction_type","            react.reacted_at = datetime.now()","            react.save()","            ","# Task-6","def react_to_comment(user_id, comment_id, reaction_type):","    user = User.objects.filter(id=user_id)","    comment = Comment.objects.filter(id=comment_id)","    if user.exists() == False:","        raise InvalidUserException","    if comment.exists() == False:","        raise InvalidCommentException","    if reaction_type not in ['WOW', 'LIT', 'LOVE', 'HAHA', 'THUMBS-UP',","                            'THUMBS-DOWN', 'ANGRY', 'SAD']:","        raise InvalidReactionTypeException","    else:","        try:","            react=Reaction.objects.get(","                reacted_by_id=user_id,","                comment_id=comment_id","                )","        except:","            Reaction.objects.create(","                reacted_by_id=user_id,","                comment_id=comment_id,","                reaction=reaction_type","                )","            return","            ","        if react.reaction == reaction_type:","            react.delete()","        else:","            react.reaction = reaction_type","            react.reacted_at = datetime.now()","            react.save()","    ","# Task-7","def get_total_reaction_count():","    return Reaction.objects.aggregate(","        count=Count('id')","        )","        ","# Task-8","def get_reaction_metrics(post_id):","    post = Post.objects.filter(id=post_id)","    if post.exists() == False:","        raise InvalidPostException","    else:","        matrices = Reaction.objects.values('reaction').filter(post_id=post_id).annotate(","            count=Count('reaction')","            )","        reaction_matrices={}","        for matric in  matrices:","            reaction_matrices[matric['reaction']] = matric['count']","    return reaction_matrices","    ","# Task-9","def delete_post(user_id, post_id):","    post=Post.objects.filter(id=post_id,posted_by_id=user_id)","    if len(post) > 0:","        post.delete()","    else:","        #user = User.objects.filter(id=user_id).exists()","        #post = Post.objects.filter(id=post_id).exists()","        if not User.objects.filter(id=user_id).exists():","            raise InvalidUserException","        if not Post.objects.filter(id=post_id).exists():","            raise InvalidPostException","        raise UserCannotDeletePostException","        ","# Task-10","def get_posts_with_more_positive_reactions():","    positive_reactions=[","        'THUMBS-UP', 'LIT', 'LOVE', 'HAHA', 'WOW'","        ]","    negative_reactions=[","        'SAD', 'ANGRY', 'THUMBS-DOWN'","        ]","    positive_count=Count('reactions',filter=Q(","        reactions__reaction__in=positive_reactions))","    negative_count=Count('reactions',filter=Q(","        reactions__reaction__in=negative_reactions))","    post=Post.objects.annotate(pcount=positive_count","        ).annotate(ncount=negative_count).filter(","        pcount__gt=F('ncount')","        ).values_list('id', flat=True)","    return list(post)","    ","# Task-11","def get_posts_reacted_by_user(user_id):","    user = User.objects.filter(id=user_id)","    if user.exists() == False:","        raise InvalidUserException","    else:","        post=Post.objects.filter(","            reactions__reacted_by_id=user_id","            ).values_list('id', flat=True)","        return list(post)","        ","# Task-12","def get_reactions_to_post(post_id):","    post = Post.objects.filter(id=post_id)","    if post.exists() == False:","        raise InvalidPostException","    else:","        reactions=Reaction.objects.filter(","            post_id=post_id","            ).select_related('reacted_by')","        user_list=[]","        for react in reactions:","            user_dict={","                'user_id': react.reacted_by_id,","                'name': react.reacted_by.name,","                'profile_pic': react.reacted_by.profile_pic,","                'reaction': react.reaction","            }","            user_list.append(user_dict)","        return user_list","        ","# Task-13","def get_post(post_id,post_value=False):","    ","    if post_value == False:","        post = Post.objects.filter(id=post_id)","        ","        if post.exists() == False:","            raise InvalidPostException","            ","        posts = Post.objects.filter(","                id=post_id).select_related(","                    'posted_by'","                    ).prefetch_related('reactions',","                    Prefetch('comments',","                    queryset=Comment.objects.select_related(","                        'commented_by').prefetch_related('reactions')))","        ","    else:","        posts = Post.objects.filter(","            posted_by_id=post_id).select_related(","                'posted_by'","                ).prefetch_related('reactions',","                Prefetch('comments',","                queryset=Comment.objects.select_related(","                    'commented_by').prefetch_related('reactions')))","        \"\"\" ","            Post.objects.filter(","            posted_by_id=post_id).select_related(","                'posted_by'","                ).prefetch_related('reactions',","                'comments__commented_by',","                'comments__reactions')","                ","        \"\"\"","    ","    post_list=[]","    ","    for post in posts:","        comment_list=[]","            ","        post_comments = list(post.comments.all())","        for comment in post_comments:","                ","            if comment.parent_comment_id == None:","                    ","                replies_list=[]","                comments_list=[]","                for comments in post_comments:","                    if comment.id == comments.parent_comment_id:","                        comments_list.append(comments)","                    ","                for comment_reply in comments_list:","                        ","                    reply_react_list=[]","                    for react in list(comment_reply.reactions.all()):","                        if react.reaction not in reply_react_list:","                            reply_react_list.append(react.reaction)","                        ","                    replies_dict={","                            'comment_id': comment_reply.id,","                            'commenter': {","                                'user_id': comment_reply.commented_by_id,","                                'name': comment_reply.commented_by.name,","                                'profile_pic': comment_reply.commented_by.profile_pic","                            },","                            'commented_at': str(datetime.strftime(comment_reply.commented_at,'%Y-%m-%d %H:%M:%S.%f')),","                            'comment_content': comment_reply.content,","                            'reactions': {","                            'count': len(reply_react_list),","                            'type': reply_react_list","                            },","                    }","                    replies_list.append(replies_dict)","                        ","                comment_react_list=[]","                for react in list(comment.reactions.all()):","                    if react.reaction not in comment_react_list:","                        comment_react_list.append(react.reaction)","                        ","                comment_dict={","                        'comment_id': comment.id,","                        'commenter': {","                          'user_id': comment.commented_by_id,","                          'name': comment.commented_by.name,","                          'profile_pic': comment.commented_by.profile_pic","                        },","                        'commented_at': str(datetime.strftime(comment.commented_at,'%Y-%m-%d %H:%M:%S.%f')),","                        'comment_content': comment.content,","                        'reactions': {","                          'count': len(comment_react_list),","                          'type': comment_react_list","                        },","                        'replies_count': len(replies_list),","                        'replies': replies_list,","                }","                comment_list.append(comment_dict)","        post_react_list=[]","        for react in list(post.reactions.all()):","            if react.reaction not in post_react_list:","                post_react_list.append(react.reaction)","            ","        post_dict={","                'post_id': post.id,","                'posted_by': {","                    'name': post.posted_by.name,","                    'user_id': post.posted_by_id,","                    'profile_pic': post.posted_by.profile_pic","                },","                'posted_at': str(datetime.strftime(post.posted_at,'%Y-%m-%d %H:%M:%S.%f')),","                'post_content': post.content,","                'reactions': {","                  'count': post.reactions.count(),","                  'type': post_react_list,","                },","                'comments': comment_list,","                'comments_count': len(comment_list),","        }","        post_list.append(post_dict)","    if post_value == True:","        return post_list","    else:","        return post_list[0]","# Task-14","def get_user_posts(user_id):","    user = User.objects.filter(id=user_id)","    if user.exists() == False:","        raise InvalidUserException","    else:","        user_posts=get_post(user_id,post_value=True)","        return user_posts","","# Task-15","def get_replies_for_comment(comment_id):","    comment = Comment.objects.filter(id=comment_id)","    if comment.exists() == False:","        raise InvalidCommentException","    else:","        comments=Comment.objects.select_related(","            'commented_by').filter(","            parent_comment_id=comment_id","            )","            ","        comment_list=[]","        for comment in comments:","            comment_dict={","                'comment_id': comment.id,","                'commenter': {","                  'user_id': comment.commented_by_id,","                  'name': comment.commented_by.name,","                  'profile_pic': comment.commented_by.profile_pic","                },","                'commented_at': str(datetime.strftime(comment.commented_at,'%Y-%m-%d %H:%M:%S.%f')),","                'comment_content': comment.content,","            }","            comment_list.append(comment_dict)","        return comment_list"]}],[{"start":{"row":16,"column":8},"end":{"row":16,"column":9},"action":"insert","lines":["#"],"id":3}],[{"start":{"row":16,"column":8},"end":{"row":16,"column":9},"action":"remove","lines":["#"],"id":4}],[{"start":{"row":9,"column":24},"end":{"row":9,"column":25},"action":"remove","lines":["\""],"id":5},{"start":{"row":9,"column":23},"end":{"row":9,"column":24},"action":"remove","lines":["\""]},{"start":{"row":9,"column":22},"end":{"row":9,"column":23},"action":"remove","lines":[" "]},{"start":{"row":9,"column":21},"end":{"row":9,"column":22},"action":"remove","lines":["="]},{"start":{"row":9,"column":20},"end":{"row":9,"column":21},"action":"remove","lines":["="]},{"start":{"row":9,"column":19},"end":{"row":9,"column":20},"action":"remove","lines":[" "]}],[{"start":{"row":9,"column":7},"end":{"row":9,"column":8},"action":"insert","lines":["n"],"id":6},{"start":{"row":9,"column":8},"end":{"row":9,"column":9},"action":"insert","lines":["o"]},{"start":{"row":9,"column":9},"end":{"row":9,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":9,"column":10},"end":{"row":9,"column":11},"action":"insert","lines":[" "],"id":7}],[{"start":{"row":26,"column":27},"end":{"row":26,"column":28},"action":"remove","lines":["\""],"id":8},{"start":{"row":26,"column":26},"end":{"row":26,"column":27},"action":"remove","lines":["\""]},{"start":{"row":26,"column":25},"end":{"row":26,"column":26},"action":"remove","lines":[" "]},{"start":{"row":26,"column":24},"end":{"row":26,"column":25},"action":"remove","lines":["="]},{"start":{"row":26,"column":23},"end":{"row":26,"column":24},"action":"remove","lines":["="]},{"start":{"row":26,"column":22},"end":{"row":26,"column":23},"action":"remove","lines":[" "]}],[{"start":{"row":26,"column":7},"end":{"row":26,"column":8},"action":"insert","lines":["n"],"id":9},{"start":{"row":26,"column":8},"end":{"row":26,"column":9},"action":"insert","lines":["o"]},{"start":{"row":26,"column":9},"end":{"row":26,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":26,"column":10},"end":{"row":26,"column":11},"action":"insert","lines":[" "],"id":10}],[{"start":{"row":45,"column":25},"end":{"row":45,"column":26},"action":"remove","lines":["\""],"id":11},{"start":{"row":45,"column":24},"end":{"row":45,"column":25},"action":"remove","lines":["\""]},{"start":{"row":45,"column":23},"end":{"row":45,"column":24},"action":"remove","lines":[" "]},{"start":{"row":45,"column":22},"end":{"row":45,"column":23},"action":"remove","lines":["="]},{"start":{"row":45,"column":21},"end":{"row":45,"column":22},"action":"remove","lines":["="]},{"start":{"row":45,"column":20},"end":{"row":45,"column":21},"action":"remove","lines":[" "]}],[{"start":{"row":45,"column":7},"end":{"row":45,"column":8},"action":"insert","lines":["n"],"id":12},{"start":{"row":45,"column":8},"end":{"row":45,"column":9},"action":"insert","lines":["o"]},{"start":{"row":45,"column":9},"end":{"row":45,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":45,"column":10},"end":{"row":45,"column":11},"action":"insert","lines":[" "],"id":13}],[{"start":{"row":43,"column":32},"end":{"row":43,"column":33},"action":"remove","lines":["e"],"id":14},{"start":{"row":43,"column":31},"end":{"row":43,"column":32},"action":"remove","lines":["s"]},{"start":{"row":43,"column":30},"end":{"row":43,"column":31},"action":"remove","lines":["l"]},{"start":{"row":43,"column":29},"end":{"row":43,"column":30},"action":"remove","lines":["a"]},{"start":{"row":43,"column":28},"end":{"row":43,"column":29},"action":"remove","lines":["F"]},{"start":{"row":43,"column":27},"end":{"row":43,"column":28},"action":"remove","lines":[" "]},{"start":{"row":43,"column":26},"end":{"row":43,"column":27},"action":"remove","lines":["="]},{"start":{"row":43,"column":25},"end":{"row":43,"column":26},"action":"remove","lines":["="]},{"start":{"row":43,"column":24},"end":{"row":43,"column":25},"action":"remove","lines":[" "]},{"start":{"row":43,"column":23},"end":{"row":43,"column":24},"action":"remove","lines":[")"]},{"start":{"row":43,"column":22},"end":{"row":43,"column":23},"action":"remove","lines":["("]}],[{"start":{"row":43,"column":21},"end":{"row":43,"column":22},"action":"remove","lines":["s"],"id":15},{"start":{"row":43,"column":20},"end":{"row":43,"column":21},"action":"remove","lines":["t"]},{"start":{"row":43,"column":19},"end":{"row":43,"column":20},"action":"remove","lines":["s"]},{"start":{"row":43,"column":18},"end":{"row":43,"column":19},"action":"remove","lines":["i"]},{"start":{"row":43,"column":17},"end":{"row":43,"column":18},"action":"remove","lines":["x"]},{"start":{"row":43,"column":16},"end":{"row":43,"column":17},"action":"remove","lines":["e"]},{"start":{"row":43,"column":15},"end":{"row":43,"column":16},"action":"remove","lines":["."]}],[{"start":{"row":43,"column":7},"end":{"row":43,"column":8},"action":"insert","lines":["n"],"id":16},{"start":{"row":43,"column":8},"end":{"row":43,"column":9},"action":"insert","lines":["o"]},{"start":{"row":43,"column":9},"end":{"row":43,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":43,"column":10},"end":{"row":43,"column":11},"action":"insert","lines":[" "],"id":17}],[{"start":{"row":41,"column":29},"end":{"row":41,"column":30},"action":"remove","lines":[":"],"id":18},{"start":{"row":41,"column":28},"end":{"row":41,"column":29},"action":"remove","lines":["e"]},{"start":{"row":41,"column":27},"end":{"row":41,"column":28},"action":"remove","lines":["s"]},{"start":{"row":41,"column":26},"end":{"row":41,"column":27},"action":"remove","lines":["l"]},{"start":{"row":41,"column":25},"end":{"row":41,"column":26},"action":"remove","lines":["a"]},{"start":{"row":41,"column":24},"end":{"row":41,"column":25},"action":"remove","lines":["F"]},{"start":{"row":41,"column":23},"end":{"row":41,"column":24},"action":"remove","lines":[" "]},{"start":{"row":41,"column":22},"end":{"row":41,"column":23},"action":"remove","lines":["="]},{"start":{"row":41,"column":21},"end":{"row":41,"column":22},"action":"remove","lines":["="]},{"start":{"row":41,"column":20},"end":{"row":41,"column":21},"action":"remove","lines":[" "]}],[{"start":{"row":41,"column":19},"end":{"row":41,"column":20},"action":"remove","lines":[")"],"id":19},{"start":{"row":41,"column":18},"end":{"row":41,"column":19},"action":"remove","lines":["("]},{"start":{"row":41,"column":17},"end":{"row":41,"column":18},"action":"remove","lines":["s"]},{"start":{"row":41,"column":16},"end":{"row":41,"column":17},"action":"remove","lines":["t"]},{"start":{"row":41,"column":15},"end":{"row":41,"column":16},"action":"remove","lines":["s"]},{"start":{"row":41,"column":14},"end":{"row":41,"column":15},"action":"remove","lines":["i"]},{"start":{"row":41,"column":13},"end":{"row":41,"column":14},"action":"remove","lines":["x"]},{"start":{"row":41,"column":12},"end":{"row":41,"column":13},"action":"remove","lines":["e"]},{"start":{"row":41,"column":11},"end":{"row":41,"column":12},"action":"remove","lines":["."]}],[{"start":{"row":41,"column":11},"end":{"row":41,"column":12},"action":"insert","lines":[":"],"id":20}],[{"start":{"row":41,"column":7},"end":{"row":41,"column":8},"action":"insert","lines":["n"],"id":21},{"start":{"row":41,"column":8},"end":{"row":41,"column":9},"action":"insert","lines":["o"]},{"start":{"row":41,"column":9},"end":{"row":41,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":41,"column":10},"end":{"row":41,"column":11},"action":"insert","lines":[" "],"id":22}],[{"start":{"row":68,"column":28},"end":{"row":68,"column":29},"action":"remove","lines":["e"],"id":23},{"start":{"row":68,"column":27},"end":{"row":68,"column":28},"action":"remove","lines":["s"]},{"start":{"row":68,"column":26},"end":{"row":68,"column":27},"action":"remove","lines":["l"]},{"start":{"row":68,"column":25},"end":{"row":68,"column":26},"action":"remove","lines":["a"]},{"start":{"row":68,"column":24},"end":{"row":68,"column":25},"action":"remove","lines":["F"]},{"start":{"row":68,"column":23},"end":{"row":68,"column":24},"action":"remove","lines":[" "]},{"start":{"row":68,"column":22},"end":{"row":68,"column":23},"action":"remove","lines":["="]},{"start":{"row":68,"column":21},"end":{"row":68,"column":22},"action":"remove","lines":["="]}],[{"start":{"row":68,"column":20},"end":{"row":68,"column":21},"action":"remove","lines":[" "],"id":24},{"start":{"row":68,"column":19},"end":{"row":68,"column":20},"action":"remove","lines":[")"]},{"start":{"row":68,"column":18},"end":{"row":68,"column":19},"action":"remove","lines":["("]},{"start":{"row":68,"column":17},"end":{"row":68,"column":18},"action":"remove","lines":["s"]},{"start":{"row":68,"column":16},"end":{"row":68,"column":17},"action":"remove","lines":["t"]},{"start":{"row":68,"column":15},"end":{"row":68,"column":16},"action":"remove","lines":["s"]},{"start":{"row":68,"column":14},"end":{"row":68,"column":15},"action":"remove","lines":["i"]}],[{"start":{"row":68,"column":13},"end":{"row":68,"column":14},"action":"remove","lines":["x"],"id":25},{"start":{"row":68,"column":12},"end":{"row":68,"column":13},"action":"remove","lines":["e"]},{"start":{"row":68,"column":11},"end":{"row":68,"column":12},"action":"remove","lines":["."]}],[{"start":{"row":68,"column":7},"end":{"row":68,"column":8},"action":"insert","lines":["n"],"id":26},{"start":{"row":68,"column":8},"end":{"row":68,"column":9},"action":"insert","lines":["o"]},{"start":{"row":68,"column":9},"end":{"row":68,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":68,"column":10},"end":{"row":68,"column":11},"action":"insert","lines":[" "],"id":27}],[{"start":{"row":70,"column":28},"end":{"row":70,"column":29},"action":"remove","lines":["e"],"id":28},{"start":{"row":70,"column":27},"end":{"row":70,"column":28},"action":"remove","lines":["s"]},{"start":{"row":70,"column":26},"end":{"row":70,"column":27},"action":"remove","lines":["l"]},{"start":{"row":70,"column":25},"end":{"row":70,"column":26},"action":"remove","lines":["a"]},{"start":{"row":70,"column":24},"end":{"row":70,"column":25},"action":"remove","lines":["F"]},{"start":{"row":70,"column":23},"end":{"row":70,"column":24},"action":"remove","lines":[" "]},{"start":{"row":70,"column":22},"end":{"row":70,"column":23},"action":"remove","lines":["="]},{"start":{"row":70,"column":21},"end":{"row":70,"column":22},"action":"remove","lines":["="]},{"start":{"row":70,"column":20},"end":{"row":70,"column":21},"action":"remove","lines":[" "]},{"start":{"row":70,"column":19},"end":{"row":70,"column":20},"action":"remove","lines":[")"]},{"start":{"row":70,"column":18},"end":{"row":70,"column":19},"action":"remove","lines":["("]},{"start":{"row":70,"column":17},"end":{"row":70,"column":18},"action":"remove","lines":["s"]},{"start":{"row":70,"column":16},"end":{"row":70,"column":17},"action":"remove","lines":["t"]},{"start":{"row":70,"column":15},"end":{"row":70,"column":16},"action":"remove","lines":["s"]},{"start":{"row":70,"column":14},"end":{"row":70,"column":15},"action":"remove","lines":["i"]}],[{"start":{"row":70,"column":13},"end":{"row":70,"column":14},"action":"remove","lines":["x"],"id":29},{"start":{"row":70,"column":12},"end":{"row":70,"column":13},"action":"remove","lines":["e"]},{"start":{"row":70,"column":11},"end":{"row":70,"column":12},"action":"remove","lines":["."]}],[{"start":{"row":70,"column":7},"end":{"row":70,"column":8},"action":"insert","lines":["n"],"id":30},{"start":{"row":70,"column":8},"end":{"row":70,"column":9},"action":"insert","lines":["o"]},{"start":{"row":70,"column":9},"end":{"row":70,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":70,"column":10},"end":{"row":70,"column":11},"action":"insert","lines":[" "],"id":31}],[{"start":{"row":100,"column":28},"end":{"row":100,"column":29},"action":"remove","lines":["e"],"id":32},{"start":{"row":100,"column":27},"end":{"row":100,"column":28},"action":"remove","lines":["s"]},{"start":{"row":100,"column":26},"end":{"row":100,"column":27},"action":"remove","lines":["l"]},{"start":{"row":100,"column":25},"end":{"row":100,"column":26},"action":"remove","lines":["a"]},{"start":{"row":100,"column":24},"end":{"row":100,"column":25},"action":"remove","lines":["F"]},{"start":{"row":100,"column":23},"end":{"row":100,"column":24},"action":"remove","lines":[" "]},{"start":{"row":100,"column":22},"end":{"row":100,"column":23},"action":"remove","lines":["="]},{"start":{"row":100,"column":21},"end":{"row":100,"column":22},"action":"remove","lines":["="]},{"start":{"row":100,"column":20},"end":{"row":100,"column":21},"action":"remove","lines":[" "]},{"start":{"row":100,"column":19},"end":{"row":100,"column":20},"action":"remove","lines":[")"]},{"start":{"row":100,"column":18},"end":{"row":100,"column":19},"action":"remove","lines":["("]},{"start":{"row":100,"column":17},"end":{"row":100,"column":18},"action":"remove","lines":["s"]},{"start":{"row":100,"column":16},"end":{"row":100,"column":17},"action":"remove","lines":["t"]},{"start":{"row":100,"column":15},"end":{"row":100,"column":16},"action":"remove","lines":["s"]}],[{"start":{"row":100,"column":14},"end":{"row":100,"column":15},"action":"remove","lines":["i"],"id":33},{"start":{"row":100,"column":13},"end":{"row":100,"column":14},"action":"remove","lines":["x"]},{"start":{"row":100,"column":12},"end":{"row":100,"column":13},"action":"remove","lines":["e"]},{"start":{"row":100,"column":11},"end":{"row":100,"column":12},"action":"remove","lines":["."]}],[{"start":{"row":100,"column":7},"end":{"row":100,"column":8},"action":"insert","lines":["n"],"id":34},{"start":{"row":100,"column":8},"end":{"row":100,"column":9},"action":"insert","lines":["o"]},{"start":{"row":100,"column":9},"end":{"row":100,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":100,"column":10},"end":{"row":100,"column":11},"action":"insert","lines":[" "],"id":35}],[{"start":{"row":102,"column":31},"end":{"row":102,"column":32},"action":"remove","lines":["e"],"id":36},{"start":{"row":102,"column":30},"end":{"row":102,"column":31},"action":"remove","lines":["s"]},{"start":{"row":102,"column":29},"end":{"row":102,"column":30},"action":"remove","lines":["l"]},{"start":{"row":102,"column":28},"end":{"row":102,"column":29},"action":"remove","lines":["a"]},{"start":{"row":102,"column":27},"end":{"row":102,"column":28},"action":"remove","lines":["F"]},{"start":{"row":102,"column":26},"end":{"row":102,"column":27},"action":"remove","lines":[" "]},{"start":{"row":102,"column":25},"end":{"row":102,"column":26},"action":"remove","lines":["="]},{"start":{"row":102,"column":24},"end":{"row":102,"column":25},"action":"remove","lines":["="]},{"start":{"row":102,"column":23},"end":{"row":102,"column":24},"action":"remove","lines":[" "]},{"start":{"row":102,"column":22},"end":{"row":102,"column":23},"action":"remove","lines":[")"]},{"start":{"row":102,"column":21},"end":{"row":102,"column":22},"action":"remove","lines":["("]},{"start":{"row":102,"column":20},"end":{"row":102,"column":21},"action":"remove","lines":["s"]},{"start":{"row":102,"column":19},"end":{"row":102,"column":20},"action":"remove","lines":["t"]},{"start":{"row":102,"column":18},"end":{"row":102,"column":19},"action":"remove","lines":["s"]},{"start":{"row":102,"column":17},"end":{"row":102,"column":18},"action":"remove","lines":["i"]},{"start":{"row":102,"column":16},"end":{"row":102,"column":17},"action":"remove","lines":["x"]},{"start":{"row":102,"column":15},"end":{"row":102,"column":16},"action":"remove","lines":["e"]}],[{"start":{"row":102,"column":14},"end":{"row":102,"column":15},"action":"remove","lines":["."],"id":37}],[{"start":{"row":102,"column":7},"end":{"row":102,"column":8},"action":"insert","lines":["n"],"id":38},{"start":{"row":102,"column":8},"end":{"row":102,"column":9},"action":"insert","lines":["o"]},{"start":{"row":102,"column":9},"end":{"row":102,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":102,"column":10},"end":{"row":102,"column":11},"action":"insert","lines":[" "],"id":39}],[{"start":{"row":137,"column":28},"end":{"row":137,"column":29},"action":"remove","lines":["e"],"id":40},{"start":{"row":137,"column":27},"end":{"row":137,"column":28},"action":"remove","lines":["s"]},{"start":{"row":137,"column":26},"end":{"row":137,"column":27},"action":"remove","lines":["l"]},{"start":{"row":137,"column":25},"end":{"row":137,"column":26},"action":"remove","lines":["a"]},{"start":{"row":137,"column":24},"end":{"row":137,"column":25},"action":"remove","lines":["F"]},{"start":{"row":137,"column":23},"end":{"row":137,"column":24},"action":"remove","lines":[" "]},{"start":{"row":137,"column":22},"end":{"row":137,"column":23},"action":"remove","lines":["="]},{"start":{"row":137,"column":21},"end":{"row":137,"column":22},"action":"remove","lines":["="]},{"start":{"row":137,"column":20},"end":{"row":137,"column":21},"action":"remove","lines":[" "]},{"start":{"row":137,"column":19},"end":{"row":137,"column":20},"action":"remove","lines":[")"]},{"start":{"row":137,"column":18},"end":{"row":137,"column":19},"action":"remove","lines":["("]},{"start":{"row":137,"column":17},"end":{"row":137,"column":18},"action":"remove","lines":["s"]},{"start":{"row":137,"column":16},"end":{"row":137,"column":17},"action":"remove","lines":["t"]},{"start":{"row":137,"column":15},"end":{"row":137,"column":16},"action":"remove","lines":["s"]},{"start":{"row":137,"column":14},"end":{"row":137,"column":15},"action":"remove","lines":["i"]},{"start":{"row":137,"column":13},"end":{"row":137,"column":14},"action":"remove","lines":["x"]},{"start":{"row":137,"column":12},"end":{"row":137,"column":13},"action":"remove","lines":["e"]},{"start":{"row":137,"column":11},"end":{"row":137,"column":12},"action":"remove","lines":["."]}],[{"start":{"row":137,"column":7},"end":{"row":137,"column":8},"action":"insert","lines":["n"],"id":41},{"start":{"row":137,"column":8},"end":{"row":137,"column":9},"action":"insert","lines":["o"]},{"start":{"row":137,"column":9},"end":{"row":137,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":137,"column":10},"end":{"row":137,"column":11},"action":"insert","lines":[" "],"id":42}],[{"start":{"row":183,"column":28},"end":{"row":183,"column":29},"action":"remove","lines":["e"],"id":43},{"start":{"row":183,"column":27},"end":{"row":183,"column":28},"action":"remove","lines":["s"]},{"start":{"row":183,"column":26},"end":{"row":183,"column":27},"action":"remove","lines":["l"]},{"start":{"row":183,"column":25},"end":{"row":183,"column":26},"action":"remove","lines":["a"]},{"start":{"row":183,"column":24},"end":{"row":183,"column":25},"action":"remove","lines":["F"]},{"start":{"row":183,"column":23},"end":{"row":183,"column":24},"action":"remove","lines":[" "]},{"start":{"row":183,"column":22},"end":{"row":183,"column":23},"action":"remove","lines":["="]},{"start":{"row":183,"column":21},"end":{"row":183,"column":22},"action":"remove","lines":["="]},{"start":{"row":183,"column":20},"end":{"row":183,"column":21},"action":"remove","lines":[" "]},{"start":{"row":183,"column":19},"end":{"row":183,"column":20},"action":"remove","lines":[")"]},{"start":{"row":183,"column":18},"end":{"row":183,"column":19},"action":"remove","lines":["("]},{"start":{"row":183,"column":17},"end":{"row":183,"column":18},"action":"remove","lines":["s"]},{"start":{"row":183,"column":16},"end":{"row":183,"column":17},"action":"remove","lines":["t"]},{"start":{"row":183,"column":15},"end":{"row":183,"column":16},"action":"remove","lines":["s"]},{"start":{"row":183,"column":14},"end":{"row":183,"column":15},"action":"remove","lines":["i"]}],[{"start":{"row":183,"column":13},"end":{"row":183,"column":14},"action":"remove","lines":["x"],"id":44},{"start":{"row":183,"column":12},"end":{"row":183,"column":13},"action":"remove","lines":["e"]},{"start":{"row":183,"column":11},"end":{"row":183,"column":12},"action":"remove","lines":["."]}],[{"start":{"row":183,"column":7},"end":{"row":183,"column":8},"action":"insert","lines":["n"],"id":45},{"start":{"row":183,"column":8},"end":{"row":183,"column":9},"action":"insert","lines":["o"]},{"start":{"row":183,"column":9},"end":{"row":183,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":183,"column":10},"end":{"row":183,"column":11},"action":"insert","lines":[" "],"id":46}],[{"start":{"row":194,"column":28},"end":{"row":194,"column":29},"action":"remove","lines":["e"],"id":47},{"start":{"row":194,"column":27},"end":{"row":194,"column":28},"action":"remove","lines":["s"]},{"start":{"row":194,"column":26},"end":{"row":194,"column":27},"action":"remove","lines":["l"]},{"start":{"row":194,"column":25},"end":{"row":194,"column":26},"action":"remove","lines":["a"]},{"start":{"row":194,"column":24},"end":{"row":194,"column":25},"action":"remove","lines":["F"]},{"start":{"row":194,"column":23},"end":{"row":194,"column":24},"action":"remove","lines":[" "]},{"start":{"row":194,"column":22},"end":{"row":194,"column":23},"action":"remove","lines":["="]},{"start":{"row":194,"column":21},"end":{"row":194,"column":22},"action":"remove","lines":["="]},{"start":{"row":194,"column":20},"end":{"row":194,"column":21},"action":"remove","lines":[" "]},{"start":{"row":194,"column":19},"end":{"row":194,"column":20},"action":"remove","lines":[")"]},{"start":{"row":194,"column":18},"end":{"row":194,"column":19},"action":"remove","lines":["("]},{"start":{"row":194,"column":17},"end":{"row":194,"column":18},"action":"remove","lines":["s"]},{"start":{"row":194,"column":16},"end":{"row":194,"column":17},"action":"remove","lines":["t"]},{"start":{"row":194,"column":15},"end":{"row":194,"column":16},"action":"remove","lines":["s"]},{"start":{"row":194,"column":14},"end":{"row":194,"column":15},"action":"remove","lines":["i"]}],[{"start":{"row":194,"column":13},"end":{"row":194,"column":14},"action":"remove","lines":["x"],"id":48},{"start":{"row":194,"column":12},"end":{"row":194,"column":13},"action":"remove","lines":["e"]},{"start":{"row":194,"column":11},"end":{"row":194,"column":12},"action":"remove","lines":["."]}],[{"start":{"row":194,"column":7},"end":{"row":194,"column":8},"action":"insert","lines":["n"],"id":49},{"start":{"row":194,"column":8},"end":{"row":194,"column":9},"action":"insert","lines":["o"]},{"start":{"row":194,"column":9},"end":{"row":194,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":194,"column":10},"end":{"row":194,"column":11},"action":"insert","lines":[" "],"id":50}],[{"start":{"row":217,"column":32},"end":{"row":217,"column":33},"action":"remove","lines":["e"],"id":51},{"start":{"row":217,"column":31},"end":{"row":217,"column":32},"action":"remove","lines":["s"]},{"start":{"row":217,"column":30},"end":{"row":217,"column":31},"action":"remove","lines":["l"]},{"start":{"row":217,"column":29},"end":{"row":217,"column":30},"action":"remove","lines":["a"]},{"start":{"row":217,"column":28},"end":{"row":217,"column":29},"action":"remove","lines":["F"]},{"start":{"row":217,"column":27},"end":{"row":217,"column":28},"action":"remove","lines":[" "]},{"start":{"row":217,"column":26},"end":{"row":217,"column":27},"action":"remove","lines":["="]},{"start":{"row":217,"column":25},"end":{"row":217,"column":26},"action":"remove","lines":["="]},{"start":{"row":217,"column":24},"end":{"row":217,"column":25},"action":"remove","lines":[" "]},{"start":{"row":217,"column":23},"end":{"row":217,"column":24},"action":"remove","lines":[")"]},{"start":{"row":217,"column":22},"end":{"row":217,"column":23},"action":"remove","lines":["("]},{"start":{"row":217,"column":21},"end":{"row":217,"column":22},"action":"remove","lines":["s"]},{"start":{"row":217,"column":20},"end":{"row":217,"column":21},"action":"remove","lines":["t"]},{"start":{"row":217,"column":19},"end":{"row":217,"column":20},"action":"remove","lines":["s"]}],[{"start":{"row":217,"column":18},"end":{"row":217,"column":19},"action":"remove","lines":["i"],"id":52},{"start":{"row":217,"column":17},"end":{"row":217,"column":18},"action":"remove","lines":["x"]},{"start":{"row":217,"column":16},"end":{"row":217,"column":17},"action":"remove","lines":["e"]},{"start":{"row":217,"column":15},"end":{"row":217,"column":16},"action":"remove","lines":["."]}],[{"start":{"row":217,"column":11},"end":{"row":217,"column":12},"action":"insert","lines":["n"],"id":53},{"start":{"row":217,"column":12},"end":{"row":217,"column":13},"action":"insert","lines":["o"]},{"start":{"row":217,"column":13},"end":{"row":217,"column":14},"action":"insert","lines":["t"]}],[{"start":{"row":217,"column":14},"end":{"row":217,"column":15},"action":"insert","lines":[" "],"id":54}],[{"start":{"row":336,"column":28},"end":{"row":336,"column":29},"action":"remove","lines":["e"],"id":55},{"start":{"row":336,"column":27},"end":{"row":336,"column":28},"action":"remove","lines":["s"]},{"start":{"row":336,"column":26},"end":{"row":336,"column":27},"action":"remove","lines":["l"]},{"start":{"row":336,"column":25},"end":{"row":336,"column":26},"action":"remove","lines":["a"]},{"start":{"row":336,"column":24},"end":{"row":336,"column":25},"action":"remove","lines":["F"]},{"start":{"row":336,"column":23},"end":{"row":336,"column":24},"action":"remove","lines":[" "]},{"start":{"row":336,"column":22},"end":{"row":336,"column":23},"action":"remove","lines":["="]},{"start":{"row":336,"column":21},"end":{"row":336,"column":22},"action":"remove","lines":["="]},{"start":{"row":336,"column":20},"end":{"row":336,"column":21},"action":"remove","lines":[" "]},{"start":{"row":336,"column":19},"end":{"row":336,"column":20},"action":"remove","lines":[")"]},{"start":{"row":336,"column":18},"end":{"row":336,"column":19},"action":"remove","lines":["("]},{"start":{"row":336,"column":17},"end":{"row":336,"column":18},"action":"remove","lines":["s"]},{"start":{"row":336,"column":16},"end":{"row":336,"column":17},"action":"remove","lines":["t"]},{"start":{"row":336,"column":15},"end":{"row":336,"column":16},"action":"remove","lines":["s"]},{"start":{"row":336,"column":14},"end":{"row":336,"column":15},"action":"remove","lines":["i"]}],[{"start":{"row":336,"column":13},"end":{"row":336,"column":14},"action":"remove","lines":["x"],"id":56},{"start":{"row":336,"column":12},"end":{"row":336,"column":13},"action":"remove","lines":["e"]},{"start":{"row":336,"column":11},"end":{"row":336,"column":12},"action":"remove","lines":["."]}],[{"start":{"row":336,"column":7},"end":{"row":336,"column":8},"action":"insert","lines":["n"],"id":57},{"start":{"row":336,"column":8},"end":{"row":336,"column":9},"action":"insert","lines":["o"]},{"start":{"row":336,"column":9},"end":{"row":336,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":336,"column":10},"end":{"row":336,"column":11},"action":"insert","lines":[" "],"id":58}],[{"start":{"row":345,"column":31},"end":{"row":345,"column":32},"action":"remove","lines":["e"],"id":59},{"start":{"row":345,"column":30},"end":{"row":345,"column":31},"action":"remove","lines":["s"]},{"start":{"row":345,"column":29},"end":{"row":345,"column":30},"action":"remove","lines":["l"]},{"start":{"row":345,"column":28},"end":{"row":345,"column":29},"action":"remove","lines":["a"]},{"start":{"row":345,"column":27},"end":{"row":345,"column":28},"action":"remove","lines":["F"]},{"start":{"row":345,"column":26},"end":{"row":345,"column":27},"action":"remove","lines":[" "]},{"start":{"row":345,"column":25},"end":{"row":345,"column":26},"action":"remove","lines":["="]},{"start":{"row":345,"column":24},"end":{"row":345,"column":25},"action":"remove","lines":["="]},{"start":{"row":345,"column":23},"end":{"row":345,"column":24},"action":"remove","lines":[" "]},{"start":{"row":345,"column":22},"end":{"row":345,"column":23},"action":"remove","lines":[")"]},{"start":{"row":345,"column":21},"end":{"row":345,"column":22},"action":"remove","lines":["("]},{"start":{"row":345,"column":20},"end":{"row":345,"column":21},"action":"remove","lines":["s"]},{"start":{"row":345,"column":19},"end":{"row":345,"column":20},"action":"remove","lines":["t"]},{"start":{"row":345,"column":18},"end":{"row":345,"column":19},"action":"remove","lines":["s"]}],[{"start":{"row":345,"column":17},"end":{"row":345,"column":18},"action":"remove","lines":["i"],"id":60},{"start":{"row":345,"column":16},"end":{"row":345,"column":17},"action":"remove","lines":["x"]},{"start":{"row":345,"column":15},"end":{"row":345,"column":16},"action":"remove","lines":["e"]},{"start":{"row":345,"column":14},"end":{"row":345,"column":15},"action":"remove","lines":["."]}],[{"start":{"row":345,"column":7},"end":{"row":345,"column":8},"action":"insert","lines":["n"],"id":61},{"start":{"row":345,"column":8},"end":{"row":345,"column":9},"action":"insert","lines":["o"]},{"start":{"row":345,"column":9},"end":{"row":345,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":345,"column":10},"end":{"row":345,"column":11},"action":"insert","lines":[" "],"id":62}],[{"start":{"row":329,"column":24},"end":{"row":329,"column":25},"action":"remove","lines":["e"],"id":63},{"start":{"row":329,"column":23},"end":{"row":329,"column":24},"action":"remove","lines":["u"]},{"start":{"row":329,"column":22},"end":{"row":329,"column":23},"action":"remove","lines":["r"]},{"start":{"row":329,"column":21},"end":{"row":329,"column":22},"action":"remove","lines":["T"]},{"start":{"row":329,"column":20},"end":{"row":329,"column":21},"action":"remove","lines":[" "]},{"start":{"row":329,"column":19},"end":{"row":329,"column":20},"action":"remove","lines":["="]},{"start":{"row":329,"column":18},"end":{"row":329,"column":19},"action":"remove","lines":["="]},{"start":{"row":329,"column":17},"end":{"row":329,"column":18},"action":"remove","lines":[" "]}],[{"start":{"row":214,"column":25},"end":{"row":214,"column":26},"action":"remove","lines":["e"],"id":64},{"start":{"row":214,"column":24},"end":{"row":214,"column":25},"action":"remove","lines":["s"]},{"start":{"row":214,"column":23},"end":{"row":214,"column":24},"action":"remove","lines":["l"]},{"start":{"row":214,"column":22},"end":{"row":214,"column":23},"action":"remove","lines":["a"]},{"start":{"row":214,"column":21},"end":{"row":214,"column":22},"action":"remove","lines":["F"]},{"start":{"row":214,"column":20},"end":{"row":214,"column":21},"action":"remove","lines":[" "]},{"start":{"row":214,"column":19},"end":{"row":214,"column":20},"action":"remove","lines":["="]},{"start":{"row":214,"column":18},"end":{"row":214,"column":19},"action":"remove","lines":["="]},{"start":{"row":214,"column":17},"end":{"row":214,"column":18},"action":"remove","lines":[" "]}],[{"start":{"row":214,"column":7},"end":{"row":214,"column":8},"action":"insert","lines":["n"],"id":65},{"start":{"row":214,"column":8},"end":{"row":214,"column":9},"action":"insert","lines":["o"]},{"start":{"row":214,"column":9},"end":{"row":214,"column":10},"action":"insert","lines":["t"]}],[{"start":{"row":214,"column":10},"end":{"row":214,"column":11},"action":"insert","lines":[" "],"id":66}],[{"start":{"row":151,"column":19},"end":{"row":151,"column":20},"action":"remove","lines":["0"],"id":68},{"start":{"row":151,"column":18},"end":{"row":151,"column":19},"action":"remove","lines":[" "]},{"start":{"row":151,"column":17},"end":{"row":151,"column":18},"action":"remove","lines":[">"]},{"start":{"row":151,"column":16},"end":{"row":151,"column":17},"action":"remove","lines":[" "]}],[{"start":{"row":151,"column":15},"end":{"row":151,"column":16},"action":"remove","lines":[")"],"id":69}],[{"start":{"row":151,"column":10},"end":{"row":151,"column":11},"action":"remove","lines":["("],"id":70},{"start":{"row":151,"column":9},"end":{"row":151,"column":10},"action":"remove","lines":["n"]},{"start":{"row":151,"column":8},"end":{"row":151,"column":9},"action":"remove","lines":["e"]},{"start":{"row":151,"column":7},"end":{"row":151,"column":8},"action":"remove","lines":["l"]}],[{"start":{"row":259,"column":35},"end":{"row":259,"column":36},"action":"remove","lines":["="],"id":71},{"start":{"row":259,"column":34},"end":{"row":259,"column":35},"action":"remove","lines":["="]}],[{"start":{"row":259,"column":34},"end":{"row":259,"column":35},"action":"insert","lines":["i"],"id":72},{"start":{"row":259,"column":35},"end":{"row":259,"column":36},"action":"insert","lines":["d"]}],[{"start":{"row":259,"column":35},"end":{"row":259,"column":36},"action":"remove","lines":["d"],"id":73}],[{"start":{"row":259,"column":35},"end":{"row":259,"column":36},"action":"insert","lines":["s"],"id":74}],[{"start":{"row":259,"column":35},"end":{"row":259,"column":36},"action":"remove","lines":["s"],"id":75},{"start":{"row":259,"column":34},"end":{"row":259,"column":35},"action":"remove","lines":["i"]}],[{"start":{"row":259,"column":34},"end":{"row":259,"column":35},"action":"insert","lines":["="],"id":76},{"start":{"row":259,"column":35},"end":{"row":259,"column":36},"action":"insert","lines":["="]}]]},"ace":{"folds":[],"scrolltop":4792,"scrollleft":0,"selection":{"start":{"row":176,"column":30},"end":{"row":176,"column":30},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":341,"state":"start","mode":"ace/mode/python"}},"timestamp":1587356005914,"hash":"93c7f18ff017df091d6a2b645ee473bedcf33e63"}