{"filter":false,"title":"tests.py","tooltip":"/clean_code/clean_code_submissions/clean_code_assignment_004/fb_post/tests.py","undoManager":{"mark":21,"position":21,"stack":[[{"start":{"row":11,"column":0},"end":{"row":143,"column":0},"action":"remove","lines":["@pytest.fixture","def user():","    ","    User.objects.bulk_create([","        User( name = 'Prathap' ),","        User( name = 'Sagaram' ),","        User( name = 'Rajesh' ),","        User( name = 'Naveen' ),","    ])","","","@pytest.fixture","@freeze_time(\"2020-04-18\")","def post(user):","    ","    Post.objects.bulk_create([","        Post(","            content = 'Good morning', ","            posted_by_id = 1","        ),","        Post(","            content = 'hello', ","            posted_by_id = 2","        ),","        Post(","            content = 'say hai', ","            posted_by_id = 4","        )","    ])","    ","    ","@pytest.fixture","@freeze_time(\"2020-04-18\")","def comment(user, post):","    ","    Comment.objects.bulk_create([","        Comment(","            content = 'nice', ","            commented_by_id = 2, ","            post_id = 1","        ),    ","        Comment(","            content = 'ohh', ","            commented_by_id = 3, ","            post_id = 1","        ),","        Comment(","            content = 'ahaa', ","            commented_by_id = 1, ","            post_id = 2","        ),","    ])","    ","","@pytest.fixture","@freeze_time(\"2020-04-18\")","def replycomment(user, post, comment):","    ","    Comment.objects.bulk_create([","        Comment(","            content = 'thanks', ","            commented_by_id = 1, ","            post_id = 1, ","            parent_comment_id = 1","        ),    ","        Comment(","            content = 'haa', ","            commented_by_id = 1, ","            post_id = 1, ","            parent_comment_id = 2","        ),","    ])","    ","","@pytest.fixture","def reactpost(user, post):","    ","    Reaction.objects.bulk_create([","        Reaction(","            post_id = 1, ","            reaction = ReactionEnum.WOW.value, ","            reacted_by_id = 3","        ),","        Reaction(","            post_id = 2, ","            reaction = ReactionEnum.LOVE.value, ","            reacted_by_id = 1","        ),","        Reaction(","            post_id = 1, ","            reaction = ReactionEnum.THUMBSDOWN.value, ","            reacted_by_id = 2","        ),","        Reaction(","            post_id = 2, ","            reaction = ReactionEnum.SAD.value, ","            reacted_by_id = 3","        ),","        Reaction(","            post_id = 1, ","            reaction = ReactionEnum.LOVE.value, ","            reacted_by_id = 1","        ),","        Reaction(","            post_id = 3, ","            reaction = ReactionEnum.ANGRY.value, ","            reacted_by_id = 3","        ),","    ])","    ","    ","@pytest.fixture","def reactcomment(user, post, comment, replycomment):","    ","    Reaction.objects.bulk_create([","        Reaction(","            comment_id = 1, ","            reaction = ReactionEnum.THUMBSUP.value, ","            reacted_by_id = 1","        ),","        Reaction(","            comment_id = 3, ","            reaction = ReactionEnum.WOW.value, ","            reacted_by_id = 2","        ),","        Reaction(","            comment_id = 4, ","            reaction = ReactionEnum.LIT.value, ","            reacted_by_id = 2","        ),","    ])","",""],"id":2}],[{"start":{"row":17,"column":37},"end":{"row":17,"column":38},"action":"remove","lines":["b"],"id":3},{"start":{"row":17,"column":36},"end":{"row":17,"column":37},"action":"remove","lines":["d"]},{"start":{"row":17,"column":35},"end":{"row":17,"column":36},"action":"remove","lines":["_"]},{"start":{"row":17,"column":34},"end":{"row":17,"column":35},"action":"remove","lines":["o"]},{"start":{"row":17,"column":33},"end":{"row":17,"column":34},"action":"remove","lines":["g"]},{"start":{"row":17,"column":32},"end":{"row":17,"column":33},"action":"remove","lines":["n"]},{"start":{"row":17,"column":31},"end":{"row":17,"column":32},"action":"remove","lines":["a"]},{"start":{"row":17,"column":30},"end":{"row":17,"column":31},"action":"remove","lines":["j"]},{"start":{"row":17,"column":29},"end":{"row":17,"column":30},"action":"remove","lines":["d"]},{"start":{"row":17,"column":28},"end":{"row":17,"column":29},"action":"remove","lines":["."]},{"start":{"row":17,"column":27},"end":{"row":17,"column":28},"action":"remove","lines":["k"]},{"start":{"row":17,"column":26},"end":{"row":17,"column":27},"action":"remove","lines":["r"]},{"start":{"row":17,"column":25},"end":{"row":17,"column":26},"action":"remove","lines":["a"]},{"start":{"row":17,"column":24},"end":{"row":17,"column":25},"action":"remove","lines":["m"]},{"start":{"row":17,"column":23},"end":{"row":17,"column":24},"action":"remove","lines":["."]},{"start":{"row":17,"column":22},"end":{"row":17,"column":23},"action":"remove","lines":["t"]},{"start":{"row":17,"column":21},"end":{"row":17,"column":22},"action":"remove","lines":["s"]},{"start":{"row":17,"column":20},"end":{"row":17,"column":21},"action":"remove","lines":["e"]},{"start":{"row":17,"column":19},"end":{"row":17,"column":20},"action":"remove","lines":["t"]},{"start":{"row":17,"column":18},"end":{"row":17,"column":19},"action":"remove","lines":["y"]},{"start":{"row":17,"column":17},"end":{"row":17,"column":18},"action":"remove","lines":["p"]},{"start":{"row":17,"column":16},"end":{"row":17,"column":17},"action":"remove","lines":[" "]},{"start":{"row":17,"column":15},"end":{"row":17,"column":16},"action":"remove","lines":["="]},{"start":{"row":17,"column":14},"end":{"row":17,"column":15},"action":"remove","lines":[" "]},{"start":{"row":17,"column":13},"end":{"row":17,"column":14},"action":"remove","lines":["k"]},{"start":{"row":17,"column":12},"end":{"row":17,"column":13},"action":"remove","lines":["r"]},{"start":{"row":17,"column":11},"end":{"row":17,"column":12},"action":"remove","lines":["a"]},{"start":{"row":17,"column":10},"end":{"row":17,"column":11},"action":"remove","lines":["m"]},{"start":{"row":17,"column":9},"end":{"row":17,"column":10},"action":"remove","lines":["t"]},{"start":{"row":17,"column":8},"end":{"row":17,"column":9},"action":"remove","lines":["s"]},{"start":{"row":17,"column":7},"end":{"row":17,"column":8},"action":"remove","lines":["e"]},{"start":{"row":17,"column":6},"end":{"row":17,"column":7},"action":"remove","lines":["t"]},{"start":{"row":17,"column":5},"end":{"row":17,"column":6},"action":"remove","lines":["y"]},{"start":{"row":17,"column":4},"end":{"row":17,"column":5},"action":"remove","lines":["p"]},{"start":{"row":17,"column":0},"end":{"row":17,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":16,"column":4},"end":{"row":17,"column":0},"action":"remove","lines":["",""],"id":4},{"start":{"row":16,"column":0},"end":{"row":16,"column":4},"action":"remove","lines":["    "]},{"start":{"row":15,"column":22},"end":{"row":16,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":12,"column":29},"end":{"row":12,"column":30},"action":"remove","lines":["s"],"id":5},{"start":{"row":12,"column":28},"end":{"row":12,"column":29},"action":"remove","lines":["e"]},{"start":{"row":12,"column":27},"end":{"row":12,"column":28},"action":"remove","lines":["g"]},{"start":{"row":12,"column":26},"end":{"row":12,"column":27},"action":"remove","lines":["n"]},{"start":{"row":12,"column":25},"end":{"row":12,"column":26},"action":"remove","lines":["a"]},{"start":{"row":12,"column":24},"end":{"row":12,"column":25},"action":"remove","lines":["h"]},{"start":{"row":12,"column":23},"end":{"row":12,"column":24},"action":"remove","lines":["c"]},{"start":{"row":12,"column":22},"end":{"row":12,"column":23},"action":"remove","lines":[" "]},{"start":{"row":12,"column":21},"end":{"row":12,"column":22},"action":"remove","lines":["y"]},{"start":{"row":12,"column":20},"end":{"row":12,"column":21},"action":"remove","lines":["r"]},{"start":{"row":12,"column":19},"end":{"row":12,"column":20},"action":"remove","lines":["a"]},{"start":{"row":12,"column":18},"end":{"row":12,"column":19},"action":"remove","lines":["s"]},{"start":{"row":12,"column":17},"end":{"row":12,"column":18},"action":"remove","lines":["s"]},{"start":{"row":12,"column":16},"end":{"row":12,"column":17},"action":"remove","lines":["e"]},{"start":{"row":12,"column":15},"end":{"row":12,"column":16},"action":"remove","lines":["c"]},{"start":{"row":12,"column":14},"end":{"row":12,"column":15},"action":"remove","lines":["e"]},{"start":{"row":12,"column":13},"end":{"row":12,"column":14},"action":"remove","lines":["n"]},{"start":{"row":12,"column":12},"end":{"row":12,"column":13},"action":"remove","lines":[" "]},{"start":{"row":12,"column":11},"end":{"row":12,"column":12},"action":"remove","lines":["e"]},{"start":{"row":12,"column":10},"end":{"row":12,"column":11},"action":"remove","lines":["k"]},{"start":{"row":12,"column":9},"end":{"row":12,"column":10},"action":"remove","lines":["a"]},{"start":{"row":12,"column":8},"end":{"row":12,"column":9},"action":"remove","lines":["M"]},{"start":{"row":12,"column":7},"end":{"row":12,"column":8},"action":"remove","lines":[" "]},{"start":{"row":12,"column":6},"end":{"row":12,"column":7},"action":"remove","lines":[":"]},{"start":{"row":12,"column":5},"end":{"row":12,"column":6},"action":"remove","lines":["O"]},{"start":{"row":12,"column":4},"end":{"row":12,"column":5},"action":"remove","lines":["D"]},{"start":{"row":12,"column":3},"end":{"row":12,"column":4},"action":"remove","lines":["O"]},{"start":{"row":12,"column":2},"end":{"row":12,"column":3},"action":"remove","lines":["T"]},{"start":{"row":12,"column":1},"end":{"row":12,"column":2},"action":"remove","lines":[" "]},{"start":{"row":12,"column":0},"end":{"row":12,"column":1},"action":"remove","lines":["#"]},{"start":{"row":11,"column":0},"end":{"row":12,"column":0},"action":"remove","lines":["",""]},{"start":{"row":10,"column":0},"end":{"row":11,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":3,"column":11},"end":{"row":3,"column":12},"action":"remove","lines":["s"],"id":6},{"start":{"row":3,"column":10},"end":{"row":3,"column":11},"action":"remove","lines":["l"]},{"start":{"row":3,"column":9},"end":{"row":3,"column":10},"action":"remove","lines":["i"]},{"start":{"row":3,"column":8},"end":{"row":3,"column":9},"action":"remove","lines":["t"]},{"start":{"row":3,"column":7},"end":{"row":3,"column":8},"action":"remove","lines":["u"]}],[{"start":{"row":3,"column":7},"end":{"row":3,"column":8},"action":"insert","lines":["m"],"id":7},{"start":{"row":3,"column":8},"end":{"row":3,"column":9},"action":"insert","lines":["o"]},{"start":{"row":3,"column":9},"end":{"row":3,"column":10},"action":"insert","lines":["d"]},{"start":{"row":3,"column":10},"end":{"row":3,"column":11},"action":"insert","lines":["e"]},{"start":{"row":3,"column":11},"end":{"row":3,"column":12},"action":"insert","lines":["l"]},{"start":{"row":3,"column":12},"end":{"row":3,"column":13},"action":"insert","lines":["s"]}],[{"start":{"row":11,"column":0},"end":{"row":68,"column":0},"action":"remove","lines":["@pytest.mark.django_db","@freeze_time(\"2020-04-17\")","class TestCreatePosts:","    ","    def test_create_post_with_valid_details_return_post_id(","        self, user):","        ","        # Arrange","        user_id = 1","        post_content = \"hello\"","        ","        # Act","        post_id = create_post(","            user_id, ","            post_content","        )","        ","        # Assert","        post = Post.objects.get(id = post_id)","        ","        assert post.posted_by_id == user_id","        assert post.content == post_content","        assert post.posted_at == timezone.now()","        ","","    def test_create_post_with_invalid_user_id_raise_error(self):","        ","        # Arrange","        user_id = 1","        post_content = \"hello\"","        ","        # Act","        with pytest.raises(InvalidUserException):","            create_post(","                user_id, ","                post_content","            )","            ","        # Assert","      ","        ","    def test_create_post_with_invalid_post_content_raise_error(","        self, user):","        ","        # Arrange","        user_id = 1","        post_content = \"\"","        ","        # Act","        with pytest.raises(InvalidPostContent):","            create_post(","                user_id, ","                post_content","            )","            ","        # Assert","     ",""],"id":8}],[{"start":{"row":11,"column":4},"end":{"row":11,"column":8},"action":"remove","lines":["    "],"id":9},{"start":{"row":11,"column":0},"end":{"row":11,"column":4},"action":"remove","lines":["    "]},{"start":{"row":10,"column":0},"end":{"row":11,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":11,"column":0},"end":{"row":100,"column":0},"action":"remove","lines":["@pytest.mark.django_db","@freeze_time(\"2020-04-18\")","class TestCreateComments:","    ","    pytestmark = pytest.mark.django_db","    ","    def test_create_comment_with_valid_details_return_comment_id(","        self, user, post):","        ","        # Arrange","        user_id = 2","        post_id = 1","        comment_content = \"superb\"","        ","        # Act","        comment_id = create_comment(","            user_id, ","            post_id, ","            comment_content","        )","        ","        # Assert","        comment = Comment.objects.get(","            id = comment_id","        )","        ","        assert comment.content == comment_content","        assert comment.commented_by_id == user_id","        assert comment.post_id == post_id","        assert comment.commented_at == timezone.now()","        ","    ","    def test_create_comment_with_invalid_user_id_raise_error(","        self, post, user):","       ","        # Arrange","        user_id = 0","        post_id = 2","        comment_content = \"nice\"","        ","        # Act","        with pytest.raises(InvalidUserException):","            create_comment(","                user_id, ","                post_id, ","                comment_content","            )","            ","        # Assert","        ","        ","    def test_create_comment_with_invalid_post_id_raise_error(","        self, post, user):","        ","        # Arrange","        user_id = 1","        post_id = 0","        comment_content = \"nice\"","        ","        # Act","        with pytest.raises(InvalidPostException):","            create_comment(","                user_id, ","                post_id, ","                comment_content","            )","            ","        # Assert","        ","        ","    def test_create_comment_with_invalid_comment_content_raise_error(","        self, post, user):","        ","        # Arrange","        user_id = 1","        post_id = 2","        comment_content = \"\"","        ","        # Act","        with pytest.raises(InvalidCommentContent):","            create_comment(","                user_id, ","                post_id, ","                comment_content","            )","            ","        # Assert","        ","        ",""],"id":10}],[{"start":{"row":11,"column":0},"end":{"row":135,"column":0},"action":"remove","lines":["@pytest.mark.django_db","@freeze_time(\"2020-04-19\")","class TestReplyToComment:","    ","    pytestmark = pytest.mark.django_db","    ","    def test_reply_to_comment_with_valid_details_return_comment_id(","        self, user, post, comment):","        ","        # Arrange","        user_id = 2","        comment_id = 3","        reply_comment_content = \"thanks\"","        post_id = 2","        ","        ","        # Act","        comment_id2 = reply_to_comment(","            user_id, ","            comment_id, ","            reply_comment_content","        )","        ","        ","        # Assert","        comment = Comment.objects.get(","            id = comment_id2","        )","        ","        assert comment.commented_by_id == user_id","        assert comment.content == reply_comment_content","        assert comment.parent_comment_id == comment_id","        assert comment.post_id == post_id","        assert comment.commented_at == timezone.now()","        ","    ","    def test_reply_to_reply_comment_with_valid_details_return_comment_id(","        self, user, post, comment, replycomment):","        ","        # Arrange","        user_id = 2","        comments = Comment.objects.get(","            id = 4, ","            parent_comment_id = 1","        )","        comment_id = comments.id","        reply_comment_content = \"hahaa\"","        post_id = 1","        ","        # Act","        comment_id2 = reply_to_comment(","            user_id, ","            comment_id, ","            reply_comment_content","        )","        ","        # Assert","        comment = Comment.objects.get(","            id = comment_id2","        )","        ","        assert comment.commented_by_id == user_id","        assert comment.content == reply_comment_content","        assert comment.parent_comment_id == comments.parent_comment_id","        assert comment.post_id == post_id","        assert comment.commented_at == timezone.now()","        ","    ","        ","    def test_reply_to_comment_with_invalid_user_id_raise_error(","        self, user, post, comment):","        ","        # Arrange","        user_id = 0","        comment_id = 1","        reply_comment_content = \"thanks\"","        ","        # Act","        with pytest.raises(InvalidUserException):","            reply_to_comment(","                user_id, ","                comment_id, ","                reply_comment_content","            )","            ","        # Assert","        ","    def test_create_reply_to_comment_with_invalid_comment_id_raise_error(","        self, user, post, comment):","        ","        # Arrange","        user_id = 1","        comment_id = 0","        reply_comment_content = \"thanks\"","        ","        # Act","        with pytest.raises(InvalidCommentException):","            reply_to_comment(","                user_id, ","                comment_id, ","                reply_comment_content","            )","            ","        # Assert","        ","    def test_reply_to_comment_with_invalid_reply_comment_content_raise_error(","        self, user, post, comment):","       ","        # Arrange","        user_id = 1","        comment_id = 1","        reply_comment_content = \"\"","        ","        # Act","        with pytest.raises(InvalidReplyContent):","            reply_to_comment(","                user_id, ","                comment_id, ","                reply_comment_content","            )","            ","        # Assert","           ","           ",""],"id":11}],[{"start":{"row":11,"column":0},"end":{"row":140,"column":0},"action":"remove","lines":["@pytest.mark.django_db","@freeze_time(\"2020-04-19\")","class TestReactToPost:","    ","    def test_react_to_post_with_valid_details_for_the_first_time_create_reaction(","        self, user, post): ","        ","        # Arrange","        user_id = 3","        post_id = 1","        reaction_type = ReactionEnum.WOW.value","        comment_id = None","        ","        # Act","        react_to_post(","            user_id, ","            post_id, ","            reaction_type","        )","        ","        # Assert","        react = Reaction.objects.get(","            post_id = post_id, ","            reacted_by_id = user_id","        )","    ","        assert react.reaction == reaction_type","        assert react.comment_id == comment_id","        assert react.reacted_at == timezone.now()","        ","    def test_react_to_post_with_valid_details_when_user_reacting_with_post_with_same_reaction_and_delete_reaction(","        self, user, post, reactpost): ","        ","        # Arrange","        user_id = 3","        post_id = 1","        reaction_type = ReactionEnum.WOW.value","        ","        # Act","        react_to_post(","            user_id, ","            post_id, ","            reaction_type","        )","        ","        # Assert","        with pytest.raises(Reaction.DoesNotExist):","            Reaction.objects.get(","                post_id = post_id, ","                reacted_by_id = user_id","            )","        ","    ","    @pytest.mark.parametrize(","        'reaction_type_1',","        [(ReactionEnum.ANGRY.value),(ReactionEnum.WOW.value)])","    def test_react_to_post_with_valid_details_when_user_reacting_with_post_with_different_reaction_and_update_reaction(","        self, user, post, reaction_type_1): ","        ","        # Arrange","        user_id = 2","        post_id = 1","        reaction_type = reaction_type_1","        ","        # Act","        react_to_post(","            user_id, ","            post_id, ","            reaction_type","        )","","        ","        # Assert","        react = Reaction.objects.get(","            post_id = post_id, ","            reacted_by_id = user_id","        )","        ","        assert react.reaction == reaction_type","        ","    def test_react_to_post_with_invaid_user_id_raise_error(","        self, user, post):","        ","        # Arrange","        user_id = 0","        post_id = 1","        reaction_type = ReactionEnum.WOW.value","        ","        # Act","        with pytest.raises(InvalidUserException):","            react_to_post(","                user_id, ","                post_id, ","                reaction_type","            )","        ","    def test_react_to_post_with_invaid_post_id_raise_error(","        self, user, post):","        ","        # Arrange","        user_id = 1","        post_id = 0","        reaction_type = ReactionEnum.WOW.value","        ","        # Act","        with pytest.raises(InvalidPostException):","            react_to_post(","                user_id, ","                post_id, ","                reaction_type","            )","            ","    def test_react_to_post_with_invaid_reaction_type_raise_error(","        self, user, post):","        ","        # Arrange","        user_id = 1","        post_id = 2","        reaction_type = 'LIKE'  ","        ","        # Act","        with pytest.raises(InvalidReactionTypeException):","            react_to_post(","                user_id, ","                post_id, ","                reaction_type","            )","        ","",""],"id":12}],[{"start":{"row":11,"column":0},"end":{"row":143,"column":0},"action":"remove","lines":["@pytest.mark.django_db","@freeze_time(\"2020-04-19\")","class TestReactToComment:","    ","    def test_react_to_comment_with_valid_details_for_the_first_time_create_reaction(","        self, user, post, comment): ","        ","        # Arrange","        user_id = 1","        comment_id = 1","        reaction_type = ReactionEnum.THUMBSUP.value","        ","        # Act","        react_to_comment(","            user_id, ","            comment_id, ","            reaction_type","        )","        ","        # Assert","        react = Reaction.objects.get(","            comment_id = comment_id, ","            reacted_by_id = user_id","        )","        ","        assert react.reaction == reaction_type","        assert react.reacted_at == timezone.now()","        ","","    def test_react_to_comment_with_valid_details_when_user_reacting_with_post_with_same_reaction_and_delete_reaction(","        self, user, post, comment): ","        ","        # Arrange","        user_id = 1","        comment_id = 1","        reaction_type = ReactionEnum.THUMBSUP.value","        react_to_comment(","            user_id, ","            comment_id, ","            reaction_type","        )","        ","        # Act","        react_to_comment(","            user_id, ","            comment_id, ","            reaction_type","        )","        ","        # Assert","        with pytest.raises(Reaction.DoesNotExist):","            Reaction.objects.get(","                comment_id = comment_id, ","                reacted_by_id = user_id","            )","        ","","    ","    @pytest.mark.parametrize(","        'reaction_type_1',","        [(ReactionEnum.ANGRY.value),(ReactionEnum.WOW.value)])","    def test_react_to_comment_with_valid_details_when_user_reacting_with_post_with_different_reaction_and_update_reaction(","        self, user, post, comment, reaction_type_1): ","        ","        # Arrange","        user_id = 1","        comment_id = 1","        reaction_type = reaction_type_1","        ","        # Act","        react_to_comment(","            user_id, ","            comment_id, ","            reaction_type","        )","        ","        # Assert","        react = Reaction.objects.get(","            comment_id = comment_id, ","            reacted_by_id = user_id","        )","        ","        assert react.reaction == reaction_type","        ","    def test_react_to_comment_with_invaid_user_id_raise_error(","        self, user, post, comment):","        ","        # Arrange","        user_id = 0","        comment_id = 1","        reaction_type = ReactionEnum.WOW.value","        ","        # Act","        with pytest.raises(InvalidUserException):","            react_to_comment(","                user_id, ","                comment_id, ","                reaction_type","            )","        ","    def test_react_to_comment_with_invaid_post_id_raise_error(","        self, user, post, comment):","        ","        # Arrange","        user_id = 1","        comment_id = 0","        reaction_type = ReactionEnum.WOW.value","        ","        # Act","        with pytest.raises(InvalidCommentException):","            react_to_comment(","                user_id, ","                comment_id, ","                reaction_type","            )","            ","    def test_react_to_comment_with_invaid_reaction_type_raise_error(","        self, user, post, comment):","        ","        # Arrange","        user_id = 1","        comment_id = 1","        reaction_type = 'LIKE'","        ","        # Act","        with pytest.raises(InvalidReactionTypeException):","            react_to_comment(","                user_id, ","                comment_id, ","                reaction_type","            )","            ",""],"id":13}],[{"start":{"row":41,"column":0},"end":{"row":100,"column":0},"action":"remove","lines":["@pytest.mark.django_db","class TestDeletePost:","    ","        pytestmark = pytest.mark.django_db","        ","        def test_delete_post_with_valid_user_id_and_post_id(","            self, user, post):","            ","            # Arrange","            user_id = 1","            post_id = 1","            ","            # Act","            delete_post(user_id, post_id)","            ","            # Assert","            with pytest.raises(Post.DoesNotExist):","                Post.objects.get(id = post_id)","                ","        def test_delete_post_with_invalid_user_id_raise_error(","            self, user, post):","           ","            # Arrange","            user_id = 0","            post_id = 1","            ","            # Act","            with pytest.raises(InvalidUserException):","                delete_post(user_id, post_id)","            ","            # Assert","            ","        def test_delete_post_with_invalid_post_id_raise_error(","            self, user, post):","            ","            # Arrange","            user_id = 1","            post_id = 0","            ","            # Act","            with pytest.raises(InvalidPostException):","                delete_post(user_id, post_id)","            ","            # Assert","            ","        def test_delete_post_with_user_id_not_matches_post_id(","            self, user, post):","            ","            # Arrange","            user_id = 1","            post_id = 2","            ","            # Act","            with pytest.raises(UserCannotDeletePostException):","                delete_post(user_id, post_id)","            ","            # Assert","            ","            ",""],"id":14}],[{"start":{"row":43,"column":58},"end":{"row":43,"column":59},"action":"remove","lines":["s"],"id":15},{"start":{"row":43,"column":57},"end":{"row":43,"column":58},"action":"remove","lines":["e"]},{"start":{"row":43,"column":56},"end":{"row":43,"column":57},"action":"remove","lines":["t"]},{"start":{"row":43,"column":55},"end":{"row":43,"column":56},"action":"remove","lines":["a"]},{"start":{"row":43,"column":54},"end":{"row":43,"column":55},"action":"remove","lines":["t"]},{"start":{"row":43,"column":53},"end":{"row":43,"column":54},"action":"remove","lines":["s"]},{"start":{"row":43,"column":52},"end":{"row":43,"column":53},"action":"remove","lines":[" "]},{"start":{"row":43,"column":51},"end":{"row":43,"column":52},"action":"remove","lines":["b"]},{"start":{"row":43,"column":50},"end":{"row":43,"column":51},"action":"remove","lines":["d"]},{"start":{"row":43,"column":49},"end":{"row":43,"column":50},"action":"remove","lines":[" "]},{"start":{"row":43,"column":48},"end":{"row":43,"column":49},"action":"remove","lines":["3"]},{"start":{"row":43,"column":47},"end":{"row":43,"column":48},"action":"remove","lines":[" "]},{"start":{"row":43,"column":46},"end":{"row":43,"column":47},"action":"remove","lines":["l"]},{"start":{"row":43,"column":45},"end":{"row":43,"column":46},"action":"remove","lines":["l"]},{"start":{"row":43,"column":44},"end":{"row":43,"column":45},"action":"remove","lines":["a"]},{"start":{"row":43,"column":43},"end":{"row":43,"column":44},"action":"remove","lines":[" "]},{"start":{"row":43,"column":42},"end":{"row":43,"column":43},"action":"remove","lines":["e"]},{"start":{"row":43,"column":41},"end":{"row":43,"column":42},"action":"remove","lines":["l"]},{"start":{"row":43,"column":40},"end":{"row":43,"column":41},"action":"remove","lines":["d"]},{"start":{"row":43,"column":39},"end":{"row":43,"column":40},"action":"remove","lines":["n"]},{"start":{"row":43,"column":38},"end":{"row":43,"column":39},"action":"remove","lines":["a"]},{"start":{"row":43,"column":37},"end":{"row":43,"column":38},"action":"remove","lines":["H"]},{"start":{"row":43,"column":36},"end":{"row":43,"column":37},"action":"remove","lines":[" "]},{"start":{"row":43,"column":35},"end":{"row":43,"column":36},"action":"remove","lines":[":"]},{"start":{"row":43,"column":34},"end":{"row":43,"column":35},"action":"remove","lines":["O"]},{"start":{"row":43,"column":33},"end":{"row":43,"column":34},"action":"remove","lines":["D"]}],[{"start":{"row":43,"column":32},"end":{"row":43,"column":33},"action":"remove","lines":["O"],"id":16},{"start":{"row":43,"column":31},"end":{"row":43,"column":32},"action":"remove","lines":["T"]},{"start":{"row":43,"column":30},"end":{"row":43,"column":31},"action":"remove","lines":[" "]},{"start":{"row":43,"column":29},"end":{"row":43,"column":30},"action":"remove","lines":["#"]},{"start":{"row":43,"column":28},"end":{"row":43,"column":29},"action":"remove","lines":[" "]},{"start":{"row":43,"column":27},"end":{"row":43,"column":28},"action":"remove","lines":[" "]}],[{"start":{"row":98,"column":0},"end":{"row":126,"column":0},"action":"remove","lines":["@pytest.mark.django_db","class TestReactedPosts:","    ","    pytest.mark.django_db","    ","    def test_get_posts_with_reacted_by_given_user_id_and_return_post_ids(","        self, user, post, reactpost):","        ","        # Arrange","        user_id = 3","        reacted_posts = [1, 2, 3]","        ","        # Act","        posts = get_posts_reacted_by_user(user_id)","        ","        # Assert","        assert posts == reacted_posts","        ","    def test_get_posts_with_reacted_by_invalid_user_id_raise_error(","        self, user, post):","        ","        # Arrange","        user_id = 0","        ","        # Act","        with pytest.raises(InvalidUserException):","                get_posts_reacted_by_user(user_id)","                ",""],"id":17}],[{"start":{"row":99,"column":0},"end":{"row":130,"column":0},"action":"remove","lines":["@pytest.mark.django_db","class TestGetReactionsToPosts:","    ","    pytest.mark.django_db","    ","    def test_get_reactions_to_post_with_valid_post_id(","        self, user, post, reactpost):","        ","        # Arrange","        post_id = 2","        reactions_list = [{'user_id': 1, 'name': 'Prathap', 'profile_pic': '', 'reaction': 'LOVE'},","                            {'user_id': 3, 'name': 'Rajesh', 'profile_pic': '', 'reaction': 'SAD'}]","                ","        # Act","        list2 = get_reactions_to_post(post_id)","        ","        # Assert","        assert list2 == reactions_list","     ","        ","    def test_get_reactions_to_post_with_invalid_post_id_raise_error(","        self, user, post, reactpost):","        ","        # Arrange","        post_id = 0","        ","        # Act","        with pytest.raises(InvalidPostException):","                get_reactions_to_post(post_id)","","               ",""],"id":18}],[{"start":{"row":111,"column":33},"end":{"row":111,"column":34},"action":"remove","lines":[" "],"id":19},{"start":{"row":111,"column":32},"end":{"row":111,"column":33},"action":"remove","lines":[" "]}],[{"start":{"row":112,"column":33},"end":{"row":112,"column":34},"action":"remove","lines":[" "],"id":20},{"start":{"row":112,"column":32},"end":{"row":112,"column":33},"action":"remove","lines":[" "]}],[{"start":{"row":113,"column":33},"end":{"row":113,"column":34},"action":"remove","lines":[" "],"id":21},{"start":{"row":113,"column":32},"end":{"row":113,"column":33},"action":"remove","lines":[" "]}],[{"start":{"row":99,"column":0},"end":{"row":137,"column":0},"action":"remove","lines":["@pytest.mark.django_db","class TestRepliesForComment:","    ","    pytest.mark.django_db","    ","    def test_get_replies_for_comment_and_return_list_of_replies(","        self, user, post, comment, replycomment):","        ","        # Arrange","        comment_id = 2","        list_of_replies = [{'comment_id': 5,","                            'commenter': {","                                'user_id': 1, ","                                'name': 'Prathap', ","                                'profile_pic': ''","                                },","                            'commented_at': '2020-04-18 00:00:00.000000',","                            'comment_content': 'haa'","            }]","        ","        # Act","        replies = get_replies_for_comment(comment_id)","        ","        # Assert","        assert replies == list_of_replies","      ","        ","    def test_get_replies_for_comment_with_invalid_comment_id_raise_error(","        self, user, post, comment, replycomment):","        ","        # Arrange","        comment_id = 0","        ","        # Act","        with pytest.raises(InvalidCommentException):","            get_replies_for_comment(comment_id)    ","         ","          ",""],"id":22}],[{"start":{"row":99,"column":0},"end":{"row":212,"column":0},"action":"remove","lines":["def check_post_details(posts, post_details):","    ","    assert posts['posted_by'] == post_details['posted_by']","    assert posts['reactions'] == post_details['reactions']","    assert posts['comments'] == post_details['comments']","    assert posts['comments_count'] == post_details['comments_count']","        ","    assert posts == post_details","    ","            ","@pytest.mark.django_db","class TestPostDetails:","    ","    pytest.mark.django_db","    ","    def test_get_details_of_post_with_valid_post_id(","        self, user, post, comment, replycomment, reactpost, reactcomment):","        ","        # Arrange","        post_id = 1","        post_details = {'post_id': 1,","                        'posted_by': {","                             'name': 'Prathap', ","                             'user_id': 1, ","                             'profile_pic': ''","                            },","                         'posted_at': '2020-04-18 00:00:00.000000',","                         'post_content': 'Good morning',","                         'reactions': {","                             'count': 3, ","                             'type': ['WOW', 'THUMBS-DOWN', 'LOVE']","                            },","                         'comments': [{","                            'comment_id': 1,","                            'commenter': {","                               'user_id': 2, ","                               'name': 'Sagaram', ","                               'profile_pic': ''","                            },","                           'commented_at': '2020-04-18 00:00:00.000000',","                           'comment_content': 'nice',","                           'reactions': {","                               'count': 1, ","                               'type': ['THUMBS-UP']","                            },","                           'replies_count': 1,","                           'replies': [{","                             'comment_id': 4,","                             'commenter': {","                                 'user_id': 1, ","                                 'name': 'Prathap', ","                                 'profile_pic': ''","                                },","                             'commented_at': '2020-04-18 00:00:00.000000',","                             'comment_content': 'thanks',","                             'reactions': {","                                 'count': 1, ","                                 'type': ['LIT']","                                }","                            }]","                            },","                          {'comment_id': 2,","                           'commenter': {","                               'user_id': 3, ","                               'name': 'Rajesh', ","                               'profile_pic': ''","                            },","                           'commented_at': '2020-04-18 00:00:00.000000',","                           'comment_content': 'ohh',","                           'reactions': {","                               'count': 0, ","                               'type': []","                            },","                           'replies_count': 1,","                           'replies': [{","                             'comment_id': 5,","                             'commenter': {","                                 'user_id': 1, ","                                 'name': 'Prathap', ","                                 'profile_pic': ''","                                },","                             'commented_at': '2020-04-18 00:00:00.000000',","                             'comment_content': 'haa',","                             'reactions': {","                                 'count': 0, ","                                 'type': []","                                }","                            }]","                        }],","                        'comments_count': 2","        }","        ","        ","","        ","        # Act","        posts = get_post(post_id)","        ","        # Assert","        check_post_details(posts, post_details)","        ","        ","        ","    def test_get_details_of_post_with_invalid_post_id_raise_error(self):","        ","        # Arrange","        post_id = 1","            ","        # Act","        with pytest.raises(InvalidPostException):","            get_reactions_to_post(post_id)"," ","          ",""],"id":23}]]},"ace":{"folds":[],"scrolltop":2163,"scrollleft":0,"selection":{"start":{"row":97,"column":0},"end":{"row":97,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":153,"state":"start","mode":"ace/mode/python"}},"timestamp":1587808278697,"hash":"c115b4d31ce715088fbe2209c5a5a45b4b23b74d"}