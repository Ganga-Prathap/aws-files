{"changed":true,"filter":false,"title":"login_interactor.py","tooltip":"/ib_miniprojects_backend/resource_management_auth/interactors/login_interactor.py","value":"from resource_management_auth.interactors.storages.storage_interface import \\\n    StorageInterface\nfrom resource_management_auth.interactors.presenters.presenter_interface import \\\n    PresenterInterface\nfrom common.oauth2_storage import OAuth2SQLStorage\nfrom resource_management_auth.exceptions.exceptions import InvalidPassword\n\n\nclass LoginInteractor:\n\n    def __init__(self, storage: StorageInterface,\n                 oauth2_storage: OAuth2SQLStorage,\n                 presenter: PresenterInterface):\n        self.storage = storage\n        self.oauth2_storage = oauth2_storage\n        self.presenter = presenter\n\n    def login(self, username: str, password: str):\n\n        self.check_username_validity(username)\n        user_id = self.check_password_validity(username, password)\n\n        from common.oauth_user_auth_tokens_service import \\\n            OAuthUserAuthTokensService\n\n        auth_token_service = OAuthUserAuthTokensService(\n            oauth2_storage=self.oauth2_storage\n        )\n        is_admin = self.storage.is_user_admin_or_not(user_id=user_id)\n        token = auth_token_service.create_user_auth_tokens(\n            user_id=user_id\n        )\n        response = self.presenter.get_tokens_service(\n            token=token,\n            is_admin=is_admin\n        )\n        return response\n\n    def check_username_validity(self, username: str):\n        is_username_exists = self.storage.validate_username(\n            username=username)\n        is_username_not_exists = not is_username_exists\n        if is_username_not_exists:\n            self.presenter.raise_exception_for_invalid_username()\n            return\n\n    def check_password_validity(self, username: str, password: str):\n        try:\n            user_id = self.storage.validate_password(\n                username=username,\n                password=password\n            )\n        except InvalidPassword:\n            self.presenter.raise_exception_for_invalid_password()\n            return\n        return user_id\n","undoManager":{"mark":0,"position":-1,"stack":[[{"start":{"row":36,"column":23},"end":{"row":36,"column":24},"action":"insert","lines":["+"],"id":2}]]},"ace":{"folds":[],"scrolltop":180,"scrollleft":0,"selection":{"start":{"row":36,"column":23},"end":{"row":36,"column":23},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":9,"state":"start","mode":"ace/mode/python"}},"timestamp":1593678913771}